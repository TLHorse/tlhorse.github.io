{"title":"什么？不用中间变量也能交换两个变量的值？","uid":"ff765a5a0903b91f9eee2699fcfb9746","slug":"什么？不用中间变量也能交换两个变量的值？","date":"2021-07-19T10:36:22.000Z","updated":"2021-07-19T13:15:46.560Z","comments":true,"path":"api/articles/什么？不用中间变量也能交换两个变量的值？.json","keywords":null,"cover":[],"content":"<p>什么？不用中间变量也能交换两个变量的值？当然可以。本文就来深入讨论一下交换变量的那些事。</p>\n<h1 id=\"使用中间变量\"><a href=\"#使用中间变量\" class=\"headerlink\" title=\"使用中间变量\"></a>使用中间变量</h1><p>假设有两个变量a和b，如何交换变量的值？<code>a = b; b = a</code>？不可以。因为计算机的特点是一个周期只能执行一个指令，不可能有两个操作同时发生。所以我们要借助一个中间变量，使两个变量在交换的时候，一个变量有地方等待另一个变量交换完毕，再进行交换。为了行文方便，变量的类型为整数。如下图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/07/19/swap_var.gif\" alt=\"使用中间变量（本图原创，严禁盗用）\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_var(int *a, int *b) &#123;\n    int c &#x3D; *a;\n    *a &#x3D; *b;\n    *b &#x3D; c;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样的代码简洁易懂，是编程的最佳选择。作为一名爱好者，让我们继续探索……</p>\n<h1 id=\"加减法\"><a href=\"#加减法\" class=\"headerlink\" title=\"加减法\"></a>加减法</h1><p>能不能使用简单的加减运算交换数值呢？将a、b两数相加，得到的和减去a得到b，减去b得到a。带着这个理论实践一下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_add(int *a, int *b) &#123;\n    int c &#x3D; *a + *b;\n    *a &#x3D; c - *a; &#x2F;&#x2F; *a &#x3D;&#x3D; *a + *b - *a &#x3D;&#x3D; *b\n    *b &#x3D; c - *a; &#x2F;&#x2F; *b &#x3D;&#x3D; *a + *b - *b &#x3D; *a\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述代码中，给<code>*a</code>和<code>*b</code>赋值的都是<code>c - *a</code>，这是因为两次<code>*a</code>的值不同。第一次<code>*a == *a</code>，第二次a的值变为b，即<code>*a == c - *a == *b</code>。</p>\n<p>我们现在想把第三方变量<code>c</code>省去，解决办法是将a与b的和加到a一个人身上。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_add(int *a, int *b) &#123;\n    *a +&#x3D; *b; &#x2F;&#x2F; a的值等同于上面的c\n    *b &#x3D; *a - *b; &#x2F;&#x2F; 这里的a是a与b的和，减去b自然等于a，将a赋值给b\n    *a -&#x3D; *b; &#x2F;&#x2F; 这里的a仍然是a与b的和，减去b自然等于a\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>减法与加法原理相同，符号不同，故不再阐述。</p>\n<h1 id=\"乘除法\"><a href=\"#乘除法\" class=\"headerlink\" title=\"乘除法\"></a>乘除法</h1><p>加减法可以实现，乘除法必定也可以实现数值交换。将加减法的原理稍加改变可得：将a、b两数相乘，得到的积除以a得到b，除以b得到a。带着这个理论实践一下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_mul(int *a, int *b) &#123;\n    int c &#x3D; *a * *b;\n    *a &#x3D; c &#x2F; *a; &#x2F;&#x2F; a &#x3D;&#x3D; a * b &#x2F; a &#x3D;&#x3D; b\n    *b &#x3D; c &#x2F; *a; &#x2F;&#x2F; b &#x3D;&#x3D; a * b &#x2F; b &#x3D; a\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们将b乘到a上，得：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_mul(int *a, int *b) &#123;\n    *a *&#x3D; *b;\n    *b &#x3D; *a &#x2F; *b; &#x2F;&#x2F; 积÷b&#x3D;a\n    *a &#x2F;&#x3D; *b; &#x2F;&#x2F; 积÷a&#x3D;b（这里b值已经变为a）\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>除与乘大同小异，不再阐述。</p>\n<h1 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h1><p>让我们进一步提问：逻辑运算可否实现功能呢？用加减乘除交换数值的原理，是算得与两数都有关的一个结果，已知一数可以求另一个数。那么逻辑运算是否可行？哪种逻辑运算有这一特性？</p>\n<p>为了方便理解，应当使用二进制。我们来观察一下二元逻辑运算的真值表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n<th align=\"center\">与</th>\n<th align=\"center\">或</th>\n<th align=\"center\">异或</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<p>我们首先排除与运算。因为当结果为0时，无法通过一个参数推断出另一个参数的真假性。</p>\n<p>再排除或运算。当结果为1时，只要有一个参数为1即满足结果，与另一参数无关。</p>\n<p>然而异或值得探讨。异或规定，相同为1，不同为0。我们只有两个参数，所以如果知道一个参数，还知道另一个参数与这个参数是否相同，我们即可求出另一参数。代码如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap_xor(int *a, int *b) &#123;\n    *a ^&#x3D; *b; &#x2F;&#x2F; a存储的是a与b每一位是否相同\n    *b ^&#x3D; *a; &#x2F;&#x2F; b依据相同性还原出a\n    *a ^&#x3D; *b; &#x2F;&#x2F; a依据相同性还原出b\n    &#x2F;&#x2F; 上述代码可简写：*a ^&#x3D; *b ^&#x3D; *a ^&#x3D; *b;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"进一步探讨\"><a href=\"#进一步探讨\" class=\"headerlink\" title=\"进一步探讨\"></a>进一步探讨</h1><p>为什么上述方法能实现两个值的交换？它们有什么共同点？</p>\n<p>从代码上来看，每一个方法都是使用了不同的量互相推导，因为一步不能做两件事情是必然的；从逻辑上来看，待交换的数值不管怎样需要一个贮存点，可以是一个第三方变量，也可以与其中一个变量一起储存，前提是一起储存的两个变量可以被第三个变量分离。</p>\n<p>我觉得我们的认知已经达到一个新的高度上了。</p>\n<h1 id=\"本文代码\"><a href=\"#本文代码\" class=\"headerlink\" title=\"本文代码\"></a>本文代码</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;time.h&gt;\n\nvoid swap_add(int *a, int *b) &#123;\n    *a +&#x3D; *b;\n    *b &#x3D; *a - *b;\n    *a -&#x3D; *b;\n&#125;\n\nvoid swap_mul(int *a, int *b) &#123;\n    *a *&#x3D; *b;\n    *b &#x3D; *a &#x2F; *b;\n    *a &#x2F;&#x3D; *b;\n&#125;\n\nvoid swap_xor(int *a, int *b) &#123;\n    &#x2F;&#x2F; *a ^&#x3D; *b;\n    &#x2F;&#x2F; *b ^&#x3D; *a;\n    &#x2F;&#x2F; *a ^&#x3D; *b;\n    *a ^&#x3D; *b ^&#x3D; *a ^&#x3D; *b;\n&#125;\n\nvoid swap_var(int *a, int *b) &#123;\n    int c &#x3D; *a;\n    *a &#x3D; *b;\n    *b &#x3D; c;\n&#125;\n\nint main() &#123;\n    int a &#x3D; 0b101101;\n    int b &#x3D; 0b1010010101;\n    time_t start, end;\n\n    printf(&quot;------xor-------\\n&quot;);\n    printf(&quot;a1: %d\\n&quot;, a);\n    printf(&quot;b1: %d\\n&quot;, b);\n    start &#x3D; time(NULL);\n    swap_xor(&amp;a, &amp;b);\n    end &#x3D; time(NULL);\n    printf(&quot;a2: %d\\n&quot;, a);\n    printf(&quot;b2: %d\\n&quot;, b);\n    printf(&quot;time&#x3D;%d\\n&quot;,difftime(end,start));\n\n    printf(&quot;------add-------\\n&quot;);\n    printf(&quot;a1: %d\\n&quot;, a);\n    printf(&quot;b1: %d\\n&quot;, b);\n    start &#x3D; time(NULL);\n    swap_add(&amp;a, &amp;b);\n    end &#x3D; time(NULL);\n    printf(&quot;a2: %d\\n&quot;, a);\n    printf(&quot;b2: %d\\n&quot;, b);\n    printf(&quot;time&#x3D;%d\\n&quot;,difftime(end,start));\n\n    printf(&quot;------mul-------\\n&quot;);\n    printf(&quot;a1: %d\\n&quot;, a);\n    printf(&quot;b1: %d\\n&quot;, b);\n    start &#x3D; time(NULL);\n    swap_mul(&amp;a, &amp;b);\n    end &#x3D; time(NULL);\n    printf(&quot;a2: %d\\n&quot;, a);\n    printf(&quot;b2: %d\\n&quot;, b);\n    printf(&quot;time&#x3D;%d\\n&quot;,difftime(end,start));\n\n    printf(&quot;------nor-------\\n&quot;);\n    printf(&quot;a1: %d\\n&quot;, a);\n    printf(&quot;b1: %d\\n&quot;, b);\n    start &#x3D; time(NULL);\n    swap_var(&amp;a, &amp;b);\n    end &#x3D; time(NULL);\n    printf(&quot;a2: %d\\n&quot;, a);\n    printf(&quot;b2: %d\\n&quot;, b);\n    printf(&quot;time&#x3D;%d\\n&quot;,difftime(end,start));\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"什么？不用中间变量也能交换两个变量的值？当然可以。本文就来深入讨论一下交换变量的那些事。 使用中间变量假设有两个变量a和b，如何交换变量的值？a = b; b = a？不可以。因为计算机的特点是一个周期只能执行一个指令，不可能有两个操作同时发生。所以我们要借助一个中间变量，使两个...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">使用中间变量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">加减法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B9%98%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">乘除法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">逻辑运算</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%8E%A2%E8%AE%A8\"><span class=\"toc-text\">进一步探讨</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E6%96%87%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">本文代码</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理发师的温暖","uid":"058d61d25b490d027df20920c0b33e2e","slug":"理发师的温暖","date":"2021-08-13T06:01:13.000Z","updated":"2022-03-20T08:02:32.167Z","comments":true,"path":"api/articles/理发师的温暖.json","keywords":null,"cover":null,"text":"一个碎片将时光远处的温暖带到了我的眼前，撞开了记忆中的一扇大门。 头发略长，我和妈妈走进了小街上偏僻的一家理发店。忘记了店名，只记得进去的场景：白炽灯嘶嘶地响着，天花板的一角已经熏得碳黑；墙上赫然贴着的“焗油 烫发”四个大字，间架结构显得十分不自然；瓷砖抓不牢墙壁和地板，一块一块...","link":"","photos":[],"count_time":{"symbolsCount":696,"symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":33,"path":"api/categories/随笔.json"}],"tags":[{"name":"记叙文","slug":"记叙文","count":11,"path":"api/tags/记叙文.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"来自高层的烦恼","uid":"5a3482dcec08e390d1e53160d46997c0","slug":"来自高层的烦恼","date":"2021-04-03T09:41:26.000Z","updated":"2022-03-20T08:02:46.400Z","comments":true,"path":"api/articles/来自高层的烦恼.json","keywords":null,"cover":null,"text":"搬进高层住宅曾是缩短我上学时间的宏图。但是如今看来，不仅没有解决我的麻烦，还给我每天的好心情泼了盆冷水。 星期一，7:20。天空此时还没有完全亮透，是一层涂着点灰色的蓝水粉，倒是挺透亮、挺好看，但阴暗的光，如同一个冰凉巴掌遮住视线，始终在我的心坎里留下一块深深的阴影。我讨厌这凄凉...","link":"","photos":[],"count_time":{"symbolsCount":730,"symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":33,"path":"api/categories/随笔.json"}],"tags":[{"name":"记叙","slug":"记叙","count":7,"path":"api/tags/记叙.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}