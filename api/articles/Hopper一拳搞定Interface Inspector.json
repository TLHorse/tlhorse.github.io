{"title":"Hopper一拳搞定Interface Inspector","uid":"6234958824fdfd14caa9462ab14bc7a8","slug":"Hopper一拳搞定Interface Inspector","date":"2020-03-27T08:40:17.000Z","updated":"2022-02-14T12:07:48.744Z","comments":true,"path":"api/articles/Hopper一拳搞定Interface Inspector.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近本打算搞定 <code>Downie 4</code>破解版，可谁知开发者用了<code>Swift</code>语言编写，导致我这个小白破解总是不得逞。忽然间听说了一个叫做<code>Interface Inspector</code>的软件，感觉还挺厉害的。接下来先给大家介绍一下（这是官方介绍，不是广告）：</p>\n<blockquote>\n<p><code>Interface Inspector</code> 使您可以在运行时研究任何<code>macOS</code>应用程序的用户界面结构和属性。</p>\n<p>在程序中使用<code>Interface Inspector</code>非常容易。 您可以通过使用<code>Interface Inspector</code>中的快捷键<code>⌘⌥A</code>来使用附加菜单，然后选择要附加到的应用程序。 然后，您可以检查视图属性，或尝试使用不同的值来约束和更多。</p>\n<p>将<code>Interface Inspector</code>附加到应用程序后，您可以使用快捷键⇧⌘K通过选择模式轻松标识各个组件。 只需单击您感兴趣的组件，它就会在<code>Interface Inspector</code>中被选中，然后开始分析其属性。</p>\n</blockquote>\n<p>总结来说<code>Interface Inspector</code>就相当于<code>iOS</code>越狱里的<code>FLEX</code>，或者相当<code>macOS</code>下的<code>Reveal</code>。不过后两者只能用于<code>iOS</code>，而<code>Interface Inspector</code>用于<code>macOS</code>。</p>\n<p>这个软件的<strong>最新版本</strong>开发要追溯到2014年，算是一个很久没有更新的软件（估计以后也不会更新），不过仍然是付费的，所以<code>macOS</code>的 crakers，这一次我带你们 patch 它！你们有福利了。</p>\n<h1 id=\"破解过程\"><a href=\"#破解过程\" class=\"headerlink\" title=\"破解过程\"></a>破解过程</h1><p>这次破解，我们的目标是：随便输入注册信息，即可使用App。</p>\n<h2 id=\"收集信息\"><a href=\"#收集信息\" class=\"headerlink\" title=\"收集信息\"></a>收集信息</h2><p>这个软件的最后更新是2014年——如果你懂一些历史的话，你会知道那时候 Apple 的SDK非常落后，开发者的反破解方案很简陋，因此这个软件应该比较好破解。首先我们在注册 License 界面的UI中收集一些字符串（图一是要 License 主页面，图二是输错 License 的页面）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-ui1.png\" alt=\"license 主页面\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-ui2.png\" alt=\"license 错误界面\"></p>\n<p>我们得到的字符串：</p>\n<ul>\n<li>Enter your registration details below, exacly as you recieved in your confirmation email:</li>\n<li>Invalid license code</li>\n<li>Please go back and try again.</li>\n</ul>\n<blockquote>\n<p>注：exacly 单词其实拼错了，应该是 exactly。不过，一切以程序中为准。</p>\n</blockquote>\n<h2 id=\"Hopper-分析\"><a href=\"#Hopper-分析\" class=\"headerlink\" title=\"Hopper 分析\"></a>Hopper 分析</h2><p>将程序二进制文件拖入 Hopper 分析，然后在<code>Str</code>一栏随便搜索一条我们得到的信息，比如第一条，之后不断按<code>X</code>，找到代码引用的源头：<code>-[SMEnterLicenseViewController loadView]</code>，地址为<code>0x10010ff3a</code>。我们再把<code>SMEnterLicenseViewController</code>作为关键词搜索。这个类就应该是图一的视图管理器。这时候，我们发现了一个很可疑的函数<code>register:</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-search-smelvc.png\" alt=\"搜索SMVC\"></p>\n<p>我们在<code>register:</code>处下个断，然后运行，随便输入一个<code>Name</code>和<code>License</code>，按下<code>Register</code>键——断下来了！这就说明，<code>register:</code>函数里包含着<code>License</code>的验证流程。</p>\n<p>打开伪代码模式：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;* @class SMEnterLicenseViewController *&#x2F;\n-(void)register:(void *)arg2 &#123;\n    rdx &#x3D; arg2;\n    r15 &#x3D; self;\n    [self commitEditing];\n    r14 &#x3D; [[r15 licenseName] retain];\n    if ([r14 length] !&#x3D; 0x0) &#123;\n            rbx &#x3D; [[r15 licenseCode] retain];\n            r12 &#x3D; [rbx length];\n            [rbx release];\n            [r14 release];\n            if (r12 !&#x3D; 0x0) &#123;\n                    r14 &#x3D; [[r15 delegate] retain];\n                    r12 &#x3D; [[r15 licenseName] retain];\n                    rbx &#x3D; [[r15 licenseCode] retain];\n                    [r14 enterLicenseViewControllerDidSelectRegister:r15 withLicenseName:r12 code:rbx];\n                    rdi &#x3D; rbx;\n                    [rdi release];\n                    [r12 release];\n                    [r14 release];\n            &#125;\n    &#125;\n    else &#123;\n            [r14 release];\n    &#125;\n    return;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看见，第16行调用了方法<code>enterLicenseViewControllerDidSelectRegister:withLicenseName:code:</code>。我们双击看看这个方法：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;* @class SMLicenseWindowController *&#x2F;\n-(void)enterLicenseViewControllerDidSelectRegister:(void *)arg2 withLicenseName:(void *)arg3 code:(void *)arg4 &#123;\n    r8 &#x3D; arg4;\n    var_30 &#x3D; self;\n    r12 &#x3D; [arg3 retain];\n    r13 &#x3D; [r8 retain];\n    rax &#x3D; [SMLicenseManager sharedInstance];\n    rax &#x3D; [rax retain];\n    var_38 &#x3D; rax;\n    rcx &#x3D; r13;\n    rbx &#x3D; [rax registerLicenseWithName:r12 code:rcx];\n    [r13 release];\n    [r12 release];\n    if (rbx !&#x3D; 0x0) &#123;\n            [var_30 loadView:0x2, rcx, r8];\n            r14 &#x3D; [[var_30 delegate] retain];\n            [r14 licenseWindowControllerDidRegister:var_30, rcx, r8];\n            [r14 release];\n    &#125;\n    else &#123;\n            [var_30 loadView:0x1];\n    &#125;\n    [var_38 release];\n    return;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们仔细品这段代码。第11行<code>rbx</code>右调用了另一个函数，不过不要紧，<code>rbx</code>应该是一个布尔值。因为第14行的判断说明，如果<code>rbx</code>为真，那么就会执行<code>if</code>代码。你再看看<code>if</code>里的第17行代码里调用了<code>licenseWindowControllerDidRegister</code>方法，从字面来看有“注册成功”的意思，因此<code>if</code>里的代码是我们想要执行的，而不是<code>else</code>里的代码。</p>\n<p>上面一自然段完全是我的逻辑判断。如果你觉得我说得啰嗦，你可以通过<strong>下断点</strong>来一步步判断代码到底执行了<code>if</code>，还是<code>else</code>。</p>\n<h2 id=\"修改-License-验证\"><a href=\"#修改-License-验证\" class=\"headerlink\" title=\"修改 License 验证\"></a>修改 License 验证</h2><p>想必这一步在坐各位都会了吧！打开<code>CFG Mode</code>，然后按照图中的方式 patch：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-cfg-patch.png\" alt=\"CFG Patch\"></p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">jne loc_10010d137<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们导出二进制，然后打开应用，成……咦？</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-signerr.png\" alt=\"签名错误\"></p>\n<h2 id=\"修复签名验证\"><a href=\"#修复签名验证\" class=\"headerlink\" title=\"修复签名验证\"></a>修复签名验证</h2><p>就如提示框说的一样，这个开发者也确实不是傻子，还知道验证个签名，防止程序被 Crack。不过别着急，先用提示框中的文字搜索一波 String：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-search-sign.png\" alt=\"搜索签名 string\"></p>\n<p>看到了吗？红框中的 String 就是提示框中的字符串。</p>\n<blockquote>\n<p>这里教大家一个小常识，开发软件中怎样不让别人在逆向中搜索你的 String：你可以将必要的提示框间接写在一个<code>.html</code>中，这样字符串就不会再程序里直接出现。</p>\n</blockquote>\n<p>之后，我们随便点开一个字符串，不断按<code>X</code>查找引用，终于在<code>applicationWillFinishLaunching:</code>启动函数中的<code>loc_100024851</code>找到。</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">loc_100024851:\n    r14 &#x3D; [[NSAlert alloc] init];\n    var_F8 &#x3D; r14;\n    r13 &#x3D; [[NSBundle mainBundle] retain];\n    rbx &#x3D; [[r13 localizedStringForKey:@&quot;Signature of the Interface Inspector is broken&quot; value:@&quot;&quot; table:0x0] retain];\n    [r14 setMessageText:rbx];\n    [rbx release];\n    [r13 release];\n    r13 &#x3D; [[NSBundle mainBundle] retain];\n    rbx &#x3D; [[r13 localizedStringForKey:@&quot;The application has an unepected signature and seems to be broken or modified. Please re-download the application.&quot; value:@&quot;&quot; table:0x0] retain];\n    [var_F8 setInformativeText:rbx];\n    rdi &#x3D; rbx;\n    rbx &#x3D; *_objc_release;\n    [rdi release];\n    [r13 release];\n    r12 &#x3D; rbx;\n    [var_F8 setAlertStyle:0x2];\n    r13 &#x3D; [[NSBundle mainBundle] retain];\n    rbx &#x3D; [[r13 localizedStringForKey:@&quot;Quit&quot; value:@&quot;&quot; table:0x0] retain];\n    [[[var_F8 addButtonWithTitle:rbx] retain] release];\n    [rbx release];\n    [r13 release];\n    r13 &#x3D; [[NSBundle mainBundle] retain];\n    rbx &#x3D; [[r13 localizedStringForKey:@&quot;Visit Website&quot; value:@&quot;&quot; table:0x0] retain];\n    rdx &#x3D; rbx;\n    [[[var_F8 addButtonWithTitle:rdx] retain] release];\n    [rbx release];\n    [r13 release];\n    if ([var_F8 runModal] &#x3D;&#x3D; 0x3e8) &#123;\n            [**_NSApp terminate:0x0];\n    &#125;\n    else &#123;\n            r14 &#x3D; [[NSWorkspace sharedWorkspace] retain];\n            r13 &#x3D; [[[[NSBundle mainBundle] retain] localizedStringForKey:@&quot;http:&#x2F;&#x2F;www.interface-inspector.com&quot; value:@&quot;&quot; table:0x0] retain];\n            rbx &#x3D; [[NSURL URLWithString:r13, @&quot;&quot;, 0x0] retain];\n            [r14 openURL:rbx, @&quot;&quot;, 0x0];\n            (r12)(rbx, @selector(openURL:), rbx, @&quot;&quot;, 0x0);\n            (r12)(r13, @selector(openURL:), rbx, @&quot;&quot;, 0x0);\n            (r12)(rax, @selector(openURL:), rbx, @&quot;&quot;, 0x0);\n            (r12)(r14, @selector(openURL:), rbx, @&quot;&quot;, 0x0);\n            [**_NSApp terminate:0x0, @&quot;&quot;, 0x0];\n    &#125;\n    [var_F8 release];\n    goto loc_100024b88;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>CFG Mode</code>里，流程如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-signcfg.png\" alt=\"签名CFG流程\"></p>\n<p>我们只需要把主程序的最后一行<code>jne</code>改为<code>je</code>即可，也就是说，如果签名没有修改，那么就会报错；如果签名被修改，反而不会报错。</p>\n<p>将<code>000000010002447e</code>的代码修改为：</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">je loc_100024851<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"改头换面\"><a href=\"#改头换面\" class=\"headerlink\" title=\"改头换面\"></a>改头换面</h1><p>接下来，我们该修改一下程序的<code>About</code>资源了。在<code>/Applications/Interface Inspector.app/Contents/Resources/</code>目录下找到<code>Credits.rtf</code>，之后在上面加上你自己的 Credit，然后在应用程序顶栏<code>Interface Inspector</code>-&gt;<code>About Interface Inspector</code>，即可看到你的 Credit：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ii-credits.png\" alt=\"你的 credit\"></p>\n<p>哈哈！我把我的名字加上去了！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然这么一个简简单单的小程序，搞起来也不是多么容易。况且我第一次上手时，搜索关键词来来回回搞了很多次呢。就算我们这样破解下来，还有个小小的 bug：每次程序启动，你必须重新输入一遍 Name 和 License，只能算是不完美破解。但是搞下来还是很有收获的——毕竟这个软件本身也来之不易啊！</p>\n","text":"前言最近本打算搞定 Downie 4破解版，可谁知开发者用了Swift语言编写，导致我这个小白破解总是不得逞。忽然间听说了一个叫做Interface Inspector的软件，感觉还挺厉害的。接下来先给大家介绍一下（这是官方介绍，不是广告）： Interface Inspecto...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">破解过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B6%E9%9B%86%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">收集信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hopper-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">Hopper 分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9-License-%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">修改 License 验证</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E5%A4%8D%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">修复签名验证</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%A4%B4%E6%8D%A2%E9%9D%A2\"><span class=\"toc-text\">改头换面</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用动态库优雅破解 AppDelete","uid":"14dad0d8b91678ae2e02ca1bc280bdf0","slug":"使用动态库优雅破解 AppDelete","date":"2020-03-29T08:40:17.000Z","updated":"2021-10-07T00:48:59.288Z","comments":true,"path":"api/articles/使用动态库优雅破解 AppDelete.json","keywords":null,"cover":[],"text":"前言我最近一直在寻找如何使用动态库注入的方法完美 Hook macOS 应用程序的方法。像MonkeyAppMac、EasySIMBL这样的框架都找遍了，可就是找不到真正的香格里拉——要么就是版本太低，要么就是缺少文档。 我刷飘云阁论坛时偶然看到了 tree_fly 大神原创的这...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"},{"name":"Hook","slug":"Hook","count":2,"path":"api/tags/Hook.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"CleanMyMac X破解初尝试","uid":"0c99958674906a2c51d4c3604b5ceb11","slug":"CleanMyMac X破解初尝试","date":"2020-03-15T01:16:00.000Z","updated":"2021-10-07T00:48:59.288Z","comments":true,"path":"api/articles/CleanMyMac X破解初尝试.json","keywords":null,"cover":[],"text":"缘起CleanMyMac X应该是每个Mac用户耳熟能详的电脑清洁软件，以下简称CMM。我几天前用的是CMM 4.5.3版本，是在xx破解网站上搜索的TNT版本，结果今天一打开CMM发现，已经有了4.6.0版本的更新。与其到xx破解网站上搜破解版，不如自己再动手破解一遍，于是就有...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}