{"title":"使用动态库优雅破解 AppDelete","uid":"14dad0d8b91678ae2e02ca1bc280bdf0","slug":"使用动态库优雅破解 AppDelete","date":"2020-03-29T08:40:17.000Z","updated":"2021-10-07T00:48:59.288Z","comments":true,"path":"api/articles/使用动态库优雅破解 AppDelete.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我最近一直在寻找如何使用动态库注入的方法完美 Hook <code>macOS</code> 应用程序的方法。像<code>MonkeyAppMac</code>、<code>EasySIMBL</code>这样的框架都找遍了，可就是找不到真正的香格里拉——要么就是版本太低，要么就是缺少文档。</p>\n<p>我刷飘云阁论坛时偶然看到了 tree_fly 大神原创的<a href=\"https://www.chinapyg.com/forum.php?mod=viewthread&tid=82610&highlight=mac\">这篇帖子</a>，介绍了如何破解<code>AppDelete</code>。它真正让我明白了 <code>macOS</code> 动态库注入的工作原理与注入方法，然而文章有些地方写的却过于跳步、不尽人意。我<del>有感而发</del>，把原帖的某些地方改了改，将不容易理解的地方进一步解释，然后改编成这篇文章。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><ul>\n<li><a href=\"http://www.reggieashworth.com/\">AppDelete</a>：<code>AppDelete</code>是Mac的卸载程序，不仅可以删除应用程序，还可以删除小部件，首选项窗格，插件和屏幕保护程序及其关联文件。 如果没有<code>AppDelete</code>，这些关联的项目将被留下来占用空间并可能引起问题。 下载完软件后没你可以先打开软件熟悉一下，</li>\n<li>Hopper Disassembler v4</li>\n<li>Xcode：此处用的版本是<code>Version 11.3.1 (11C504)</code>。</li>\n</ul>\n<h1 id=\"分析软件\"><a href=\"#分析软件\" class=\"headerlink\" title=\"分析软件\"></a>分析软件</h1><p>因为软件支持中文，所以我们可以通过字符串本地化文件来判断中文对应的英文。打开软件的资源目录中的中文目录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;Applications&#x2F;AppDelete.app&#x2F;Contents&#x2F;Resources&#x2F;zh_CN.lproj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>找到本地中文资源文件 <code>Localizable.strings</code>，注意到如下信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;AppDelete Registration&quot; &#x3D; &quot;AppDelete 注册&quot;;\n&quot;Registration Accepted&quot; &#x3D; &quot;接受注册&quot;;\n&quot;Registration Rejected&quot; &#x3D; &quot;拒绝注册&quot;;\n&quot;Register&quot; &#x3D; &quot;注册&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将软件载入Hopper，查找上面的英文字符串。通过寻找引用的方法（X），找到程序验证的核心：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;* @class ADController *&#x2F;\n&#x2F;* Address: 0x1000118add *&#x2F;\n-(void)deletePaths:(void *)arg2 &#123;\n    r14 &#x3D; [[self-&gt;plistOne stringValue] retain];\n    r15 &#x3D; [[r14 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n    var_30 &#x3D; [r15 isEqualTo:@&quot;&quot;];\n    [r15 release];\n    [r14 release];\n    var_38 &#x3D; self;\n    r15 &#x3D; [[self-&gt;extensionMaster stringValue] retain];\n    rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n    rdx &#x3D; @&quot;&quot;;\n    r14 &#x3D; [rbx isEqualTo:rdx];\n    [rbx release];\n    [r15 release];\n    if (var_30 !&#x3D; 0x1) &#123;\n            rdx &#x3D; @&quot;&quot;;\n            if (r14 !&#x3D; 0x1) &#123;\n                    r14 &#x3D; [[var_38-&gt;extensionMaster stringValue] retain];\n                    rbx &#x3D; [[r14 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                    rdx &#x3D; rbx;\n                    r15 &#x3D; [var_38 orphansArray:rdx]; &#x2F;&#x2F; 1\n                    [rbx release];\n                    [r14 release];\n                    if (r15 !&#x3D; 0x0) &#123;\n                            &#x2F;&#x2F; 2\n                            rbx &#x3D; [[NSBundle mainBundle] retain];\n                            r15 &#x3D; [[rbx localizedStringForKey:@&quot;Registration Accepted&quot; value:@&quot;&quot; table:0x0] retain];\n                            var_48 &#x3D; r15;\n                            [rbx release];\n                            intrinsic_movsd(xmm1, *double_value_0_607843);\n                            intrinsic_movsd(xmm3, *double_value_1);\n                            intrinsic_xorpd(xmm0, xmm0);\n                            rax &#x3D; [NSColor colorWithCalibratedRed:@&quot;Registration Accepted&quot; green:@&quot;&quot; blue:r8 alpha:r9];\n                            rax &#x3D; [rax retain];\n                            rbx &#x3D; *ivar_offset(zipFiles);\n                            [*(var_38 + rbx) setTextColor:rax, @&quot;&quot;];\n                            [*(var_38 + rbx) setStringValue:r15, @&quot;&quot;];\n                            [*(var_38 + rbx) setHidden:0x0, @&quot;&quot;];\n                            [var_38-&gt;zButton setEnabled:0x0, @&quot;&quot;];\n                            [var_38-&gt;qButton setEnabled:0x0, @&quot;&quot;];\n                            [var_38-&gt;plistOne setEnabled:0x0, @&quot;&quot;];\n                            r15 &#x3D; *ivar_offset(extensionMaster);\n                            [*(var_38 + r15) setEnabled:0x0, @&quot;&quot;];\n                            [var_38-&gt;helpP setEnabled:0x0, @&quot;&quot;];\n                            r13 &#x3D; [[*(var_38 + r15) stringValue] retain];\n                            rbx &#x3D; [[r13 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                            var_40 &#x3D; [[rbx dataUsingEncoding:0x4, @&quot;&quot;] retain];\n                            [rbx release];\n                            [r13 release];\n                            rbx &#x3D; [[NSUserDefaults standardUserDefaults] retain];\n                            r12 &#x3D; [[var_38-&gt;plistOne stringValue] retain];\n                            [rbx setObject:r12 forKey:@&quot;ADFieldOne&quot;];\n                            [r12 release];\n                            [rbx release];\n                            rbx &#x3D; [[NSUserDefaults standardUserDefaults] retain];\n                            [rbx setObject:var_40 forKey:@&quot;ADFieldTwo&quot;];\n                            [rbx release];\n                            *(int8_t *)&amp;var_38-&gt;archiveRun &#x3D; 0x1;\n                            *(int8_t *)&amp;var_38-&gt;undoList &#x3D; 0x0;\n                            [var_40 release];\n                            [rax release];\n                            rdi &#x3D; var_48;\n                    &#125;\n                    else &#123;\n                            &#x2F;&#x2F; 3\n                            r15 &#x3D; [[var_38-&gt;plistOne stringValue] retain];\n                            rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                            NSLog(@&quot;AD Rejected Name ~ %@&quot;, rbx);\n                            [rbx release];\n                            [r15 release];\n                            r15 &#x3D; [[var_38-&gt;extensionMaster stringValue] retain];\n                            rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                            NSLog(@&quot;AD Rejected Serial Number ~ %@&quot;, rbx);\n                            [rbx release];\n                            [r15 release];\n                            rbx &#x3D; [[NSBundle mainBundle] retain];\n                            r15 &#x3D; [[rbx localizedStringForKey:@&quot;Registration Rejected&quot; value:@&quot;&quot; table:0x0] retain];\n                            [rbx release];\n                            intrinsic_movsd(xmm0, *double_value_0_921569);\n                            intrinsic_movsd(xmm3, *double_value_1);\n                            intrinsic_xorpd(xmm1, xmm1);\n                            r14 &#x3D; [[NSColor colorWithCalibratedRed:@&quot;Registration Rejected&quot; green:@&quot;&quot; blue:r8 alpha:r9] retain];\n                            rbx &#x3D; *ivar_offset(zipFiles);\n                            [*(var_38 + rbx) setTextColor:r14, @&quot;&quot;];\n                            [*(var_38 + rbx) setStringValue:r15, @&quot;&quot;];\n                            [*(var_38 + rbx) setHidden:0x0, @&quot;&quot;];\n                            [var_38-&gt;plistOne setStringValue:@&quot;&quot;, @&quot;&quot;];\n                            [var_38-&gt;extensionMaster setStringValue:@&quot;&quot;, @&quot;&quot;];\n                            *(int8_t *)&amp;var_38-&gt;archiveRun &#x3D; 0x0;\n                            [r14 release];\n                            rdi &#x3D; r15;\n                    &#125;\n            &#125;\n            else &#123;\n                    r15 &#x3D; [[var_38-&gt;plistOne stringValue] retain];\n                    rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                    NSLog(@&quot;AD Rejected Name ~ %@&quot;, rbx);\n                    [rbx release];\n                    [r15 release];\n                    r15 &#x3D; [[var_38-&gt;extensionMaster stringValue] retain];\n                    rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n                    NSLog(@&quot;AD Rejected Serial Number ~ %@&quot;, rbx);\n                    [rbx release];\n                    [r15 release];\n                    rbx &#x3D; [[NSBundle mainBundle] retain];\n                    r15 &#x3D; [[rbx localizedStringForKey:@&quot;Registration Rejected&quot; value:@&quot;&quot; table:0x0] retain];\n                    [rbx release];\n                    intrinsic_movsd(xmm0, *double_value_0_921569);\n                    intrinsic_movsd(xmm3, *double_value_1);\n                    intrinsic_xorpd(xmm1, xmm1);\n                    r14 &#x3D; [[NSColor colorWithCalibratedRed:@&quot;Registration Rejected&quot; green:@&quot;&quot; blue:r8 alpha:r9] retain];\n                    rbx &#x3D; *ivar_offset(zipFiles);\n                    [*(var_38 + rbx) setTextColor:r14, @&quot;&quot;];\n                    [*(var_38 + rbx) setStringValue:r15, @&quot;&quot;];\n                    [*(var_38 + rbx) setHidden:0x0, @&quot;&quot;];\n                    [var_38-&gt;plistOne setStringValue:@&quot;&quot;, @&quot;&quot;];\n                    [var_38-&gt;extensionMaster setStringValue:@&quot;&quot;, @&quot;&quot;];\n                    *(int8_t *)&amp;var_38-&gt;archiveRun &#x3D; 0x0;\n                    [r14 release];\n                    rdi &#x3D; r15;\n            &#125;\n    &#125;\n    else &#123;\n            r15 &#x3D; [[var_38-&gt;plistOne stringValue] retain];\n            rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n            NSLog(@&quot;AD Rejected Name ~ %@&quot;, rbx);\n            [rbx release];\n            [r15 release];\n            r15 &#x3D; [[var_38-&gt;extensionMaster stringValue] retain];\n            rbx &#x3D; [[r15 stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;] retain];\n            NSLog(@&quot;AD Rejected Serial Number ~ %@&quot;, rbx);\n            [rbx release];\n            [r15 release];\n            rbx &#x3D; [[NSBundle mainBundle] retain];\n            r15 &#x3D; [[rbx localizedStringForKey:@&quot;Registration Rejected&quot; value:@&quot;&quot; table:0x0] retain];\n            [rbx release];\n            intrinsic_movsd(xmm0, *double_value_0_921569);\n            intrinsic_movsd(xmm3, *double_value_1);\n            intrinsic_xorpd(xmm1, xmm1);\n            r14 &#x3D; [[NSColor colorWithCalibratedRed:@&quot;Registration Rejected&quot; green:@&quot;&quot; blue:r8 alpha:r9] retain];\n            rbx &#x3D; *ivar_offset(zipFiles);\n            [*(var_38 + rbx) setTextColor:r14, @&quot;&quot;];\n            [*(var_38 + rbx) setStringValue:r15, @&quot;&quot;];\n            [*(var_38 + rbx) setHidden:0x0, @&quot;&quot;];\n            [var_38-&gt;plistOne setStringValue:@&quot;&quot;, @&quot;&quot;];\n            [var_38-&gt;extensionMaster setStringValue:@&quot;&quot;, @&quot;&quot;];\n            *(int8_t *)&amp;var_38-&gt;archiveRun &#x3D; 0x0;\n            [r14 release];\n            rdi &#x3D; r15;\n    &#125;\n    [rdi release];\n    return;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><code>orphansArray:</code>函数应该是一个判断函数。如果你点进去，你可以看到函数声明中有严谨的判断流程；</li>\n<li>如果代码执行到这里，那么就代表验证成功，可以使用App；</li>\n<li>执行到这里，就是验证失败。</li>\n</ol>\n<p>此时如果你把<code>orphansArray:</code>的返回值修改为0x1：</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">mov eax, 0x1\nret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>那么你会发现软件运行、重启后，注册验证都通过了，同时注册按钮已经变灰，注册成功！你也可以根据<code>orphansArray:</code>的验证流程来写注册机。当然这些不是本篇文章的重点，接下来为大家介绍如何使用动态库注入来修改函数返回值。</p>\n<h1 id=\"代码劫持\"><a href=\"#代码劫持\" class=\"headerlink\" title=\"代码劫持\"></a>代码劫持</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>简单的说，在<code>Windows</code>下，很多时候我们在软件<code>.exe</code>同一目录下放置<code>version.dll</code>、<code>lpk.dll</code>等劫持文件，依照规则<code>.exe</code>优先加载了当前目录下<code>.dll</code>，可以偷偷摸摸做很多想做的事。</p>\n<p>同理，在<code>macOS</code>下，思路是相同的，你可以想尽一切办法让App加载我们的动态库。加载完自定义的动态库，破解即成功。</p>\n<h2 id=\"动态库编写\"><a href=\"#动态库编写\" class=\"headerlink\" title=\"动态库编写\"></a>动态库编写</h2><ol>\n<li><p>首先，<a href=\"xcode://\">打开Xcode</a>（你会神奇的发现如果你点击这个链接你的Xcode就会打开）。在<code>macOS</code>平台里选择 <code>Framework &amp; Library </code>&gt; <code>Library</code>。使用此模板新建一个项目，名称随便起，此处叫做<code>AppDeletePatch</code>，<code>Framework</code>选择<code>Cocoa</code>，<code>Type</code>选择<code>Dyamic</code>（动态）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ad-choose-temp.png\" alt=\"选择模版\"></p>\n<p>这一步可以创建一个动态库工程。这个动态库就是我们要注入的动态库。</p>\n<p>其次，我们打开<code>AppDeletePatch.m</code>文件。接下来我一步步带你编写动态库代码：</p>\n</li>\n<li><p>我们用两个<code>#import</code>语句，将<code>AppDeletePatch.h</code>文件与<code>objc/runtime.h</code>。<code>AppDeletePatch.h</code>文件（头文件），是每个<code>.m</code>文件里必须引用的。而<code>objc/runtime.h</code>库是什么？这就是很多小白不了解的地方之一。简单的解释，<code>runtime</code>是<code>C</code>类语言**”运行时”机制**的一个强大的库。通过这个库里的方法，可以在运行时实现对OC函数的 hook。</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">#import &quot;AppDeletePatch.h&quot;\n   #import &lt;objc&#x2F;runtime.h&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在，这两行代码明白了吧！</p>\n</li>\n<li><p>接下来，在两个引入语句的下面编写：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">@implementation AppDeletePatch\n\n\n\n@end<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>Objective-C</code>语言中，可以使用<code>implementation</code>进行一个类的具体实现，类的实现代码以<code>@implementation</code>开始，以<code>@end</code>结束。这就类似于<code>Python</code>、<code>Swift</code>的<code>class</code>。<strong>这部分代码通常都是放在<code>.m</code>文件中</strong>。</p>\n</li>\n<li><p>然后，我们在<code>@implementation</code>的内部，声明一个函数：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">- (char)orphansArray:(NSString *)data &#123;\n    NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD PATCHING &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    return 0x1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这又涉及了<code>OC</code>的语法，我们简单说一下。这样写，是实现了一个函数，函数名是<code>orphansArray:</code>。而冒号后面跟的是函数的参数列表<code>(NSString *)data</code>。这里声明了一个类型为<code>NSString</code>的参数<code>data</code>。而前面的<code>(char)</code>则代表函数的返回值。</p>\n<p>如果你把原程序里<code>orphansArray:</code>的函数声明伪代码与这里的函数声明做对比，你会发现，这里的函数声明与原程序的函数声明一模一样。</p>\n<p>你可能会疑问，函数前面的减号是干嘛的？类方法以<code>+</code>号开头，对象方法以<code>-</code>号开头。</p>\n<p>函数里的两行代码就好解释了。<code>NSLog:</code>就是日志输出，相当于<code>Swift</code>和<code>Python</code>下的<code>print()</code>，这里我打印了一条信息以便记录；<code>return</code>就是返回的意思，此处返回了<code>0x1</code>一值。</p>\n<p><code>orphansArray:</code>的实现就到此结束了。</p>\n</li>\n<li><p>在<code>orphansArray:</code>的实现后，空上几行，然后输入<code>load</code>。<code>Xcode</code>的自动补全功能会弹出列表。在列表第一行回车，之后在添上大括号：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">+ (void)load &#123;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这个方法是干什么的？每当将类或类别添加到Objective-C的<code>runtime</code>时会被调用； 实现此方法以在加载时执行特定于类的行为。<code>load</code>方法的初始化顺序如下：</p>\n<ol>\n<li>您链接到的任何框架中的所有初始化程序。</li>\n<li>图片中的所有<code> + load</code>方法。</li>\n<li>图像中的所有<code>C++</code>静态初始化程序和<code>C</code> / <code>C ++</code> <code>__attribute __(constructor)</code>函数。</li>\n<li>链接到您的框架中的所有初始化程序。</li>\n</ol>\n<p>我们在<code>load</code>里键入：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; START DYLIB INJECT &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n\nNSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; GETTING METHOD &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\nMethod origMethod &#x3D; class_getInstanceMethod(NSClassFromString(@&quot;ADController&quot;), NSSelectorFromString(@&quot;orphansArray:&quot;)); &#x2F;&#x2F; 1\nMethod newMethod &#x3D; class_getInstanceMethod([AppDeletePatch class], @selector(orphansArray:)); &#x2F;&#x2F; 2\n\nmethod_exchangeImplementations(origMethod, newMethod); &#x2F;&#x2F; 3\nNSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD SWIZZLED &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>通过<code>class_getInstanceMethod</code>函数，获取程序里<code>orphansArray:</code>的原函数；</li>\n<li>这一行代码与<code>3</code>同理，只不过是获取我们声明的替换函数<code>orphansArray:</code>；</li>\n<li>通过<code>method_exchangeImplementations</code>函数替换刚才获取的两个新旧函数。</li>\n</ol>\n<p>其中：</p>\n<ul>\n<li><code>NSClassFromString</code>可以通过字符串获取类；</li>\n<li><code>NSSelectorFromString</code>可以通过字符串获取方法；</li>\n<li><code>[AppDeletePatch class]</code>代表<code>AppDeletePatch</code>类的<code>class</code>本身；</li>\n<li>通过<code>@selector</code>直接获取一个函数。</li>\n</ul>\n</li>\n</ol>\n<p>到此，动态库的代码编写结束。整体的代码应该长这样：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">#import &quot;AppDeletePatch.h&quot;\n#import &lt;objc&#x2F;runtime.h&gt;\n\n@implementation AppDeletePatch\n\n- (char)orphansArray:(NSString *)data &#123;\n    NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD PATCHING &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    return 0x1;\n&#125;\n\n+ (void)load &#123;\n    NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; START DYLIB INJECT &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n\n    NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; GETTING METHOD &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    Method origMethod &#x3D; class_getInstanceMethod(NSClassFromString(@&quot;ADController&quot;), NSSelectorFromString(@&quot;orphansArray:&quot;));\n    Method newMethod &#x3D; class_getInstanceMethod([AppDeletePatch class], @selector(orphansArray:));\n\n    method_exchangeImplementations(origMethod, newMethod);\n    NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD SWIZZLED &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n&#125;\n\n@end<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"动态库注入\"><a href=\"#动态库注入\" class=\"headerlink\" title=\"动态库注入\"></a>动态库注入</h2><p>编写完动态库，就可以注入了。按下<code>Cmd</code>+<code>B</code>编译，得到<code>.dylib</code>文件。</p>\n<p>之后我们要注入。原作者用的是<code>bash</code>脚本，但是这样做比较费事，容易发生权限错误，因此我们用<code>insert_dylib</code>工具注入。点击<a href=\"xcode://clone?repo=https%3A%2F%2Fgithub.com%2FTyilo%2Finsert_dylib\">这个链接</a>将<code>insert_dylib</code>项目克隆到<code>Xcode</code>，并且编译，得到<code>insert_dylib</code>二进制文件。</p>\n<p>我们将动态库、二进制文件和<code>AppDelete</code>应用程序的路径分别记录下来，然后打开终端，执行命令（记得替换路径）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ .&#x2F;insert_dylib xxx&#x2F;libAppDeletePatch.dylib xxx&#x2F;AppDelete.app&#x2F;Contents&#x2F;MacOS&#x2F;AppDelete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注：<code>./insert_dylib</code>的用法是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.&#x2F;insert_dylib [要被注入的动态库的路径] [要注入的二进制文件]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意第二个参数，是要注入的<strong>二进制文件</strong>，而不是<code>.app</code>文件，或者其他。还要注意，路径要使用<strong>绝对路径</strong>。</p>\n<p>回车后，如果出现<code>LC_CODE_SIGNATURE load command found. Remove it? [y/n]</code>，那么就按下<code>y</code>，回车。</p>\n<p>如果出现<code>Added LC_LOAD_DYLIB to /Applications/AppDelete.app/Contents/MacOS/AppDelete_patched</code>，代表注入成功。</p>\n<p>回到<code>/Applications/AppDelete.app/Contents/MacOS/</code>路径，会发现多出一个<code>AppDelete_patched</code>文件。这就是已注入动态库的二进制文件。把原先的<code>AppDelete</code>二进制更名或删除，然后将<code>AppDelete_patched</code>更名为<code>AppDelete</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/3/27/hop-ad-chname.png\" alt=\"重命名\"></p>\n<h1 id=\"验证破解\"><a href=\"#验证破解\" class=\"headerlink\" title=\"验证破解\"></a>验证破解</h1><p>我们现在不要用正常的方法打开软件。我们还保持上一步的目录（<code>MacOS</code>），然后双击已经被注入的二进制文件，应用也会打开。不过同时会打开一个终端窗口，在这个窗口中就可以看到我们在写代码时使用<code>NSLog</code>语句打印的内容了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; START DYLIB INJECT &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; GETTING METHOD &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD PATCHING &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; METHOD SWIZZLED &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>成功破解！</p>\n","text":"前言我最近一直在寻找如何使用动态库注入的方法完美 Hook macOS 应用程序的方法。像MonkeyAppMac、EasySIMBL这样的框架都找遍了，可就是找不到真正的香格里拉——要么就是版本太低，要么就是缺少文档。 我刷飘云阁论坛时偶然看到了 tree_fly 大神原创的这...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"},{"name":"Hook","slug":"Hook","count":2,"path":"api/tags/Hook.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87\"><span class=\"toc-text\">准备</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">分析软件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8A%AB%E6%8C%81\"><span class=\"toc-text\">代码劫持</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%BA%93%E7%BC%96%E5%86%99\"><span class=\"toc-text\">动态库编写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%BA%93%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">动态库注入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3\"><span class=\"toc-text\">验证破解</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"教你过关吾爱破解游戏《圈小猫》","uid":"4e44912726150161c7f0d572def57fc3","slug":"教你过关吾爱破解游戏《圈小猫》","date":"2020-03-29T08:40:17.000Z","updated":"2021-10-07T00:48:59.289Z","comments":true,"path":"api/articles/教你过关吾爱破解游戏《圈小猫》.json","keywords":null,"cover":[],"text":"前言我刚结识吾爱破解网站，就认识了网站的隐藏游戏《圈小猫》。我把《圈小猫》这个游戏吹爆——这个游戏确实好玩，但这是只有像我一样聪明的人才能玩得起的游戏。 因此，这篇文章将会教你如何篡改这个游戏，实现任何人，局局都能赢（如果说逆向这个游戏，未免有些太夸张了）。如果，你以前玩游戏的时...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"HTML5","slug":"HTML5","count":1,"path":"api/tags/HTML5.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"Hopper一拳搞定Interface Inspector","uid":"6234958824fdfd14caa9462ab14bc7a8","slug":"Hopper一拳搞定Interface Inspector","date":"2020-03-27T08:40:17.000Z","updated":"2022-02-14T12:07:48.744Z","comments":true,"path":"api/articles/Hopper一拳搞定Interface Inspector.json","keywords":null,"cover":[],"text":"前言最近本打算搞定 Downie 4破解版，可谁知开发者用了Swift语言编写，导致我这个小白破解总是不得逞。忽然间听说了一个叫做Interface Inspector的软件，感觉还挺厉害的。接下来先给大家介绍一下（这是官方介绍，不是广告）： Interface Inspecto...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}