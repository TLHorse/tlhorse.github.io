{"title":"零基础写一个Hopper插件hex2str","uid":"6c4d8fd5ee0834439819f79dc5ca0952","slug":"零基础写一个Hopper插件hex2str","date":"2022-01-29T03:13:16.000Z","updated":"2022-03-21T12:39:29.299Z","comments":true,"path":"api/articles/零基础写一个Hopper插件hex2str.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/29/hex2str-2.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之所以这么说，是因为我也是零基础写的。今天上午本来想搞一搞某个软件，放到Hopper里一看：<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/29/hex2str-1.jpg\" alt=\"满眼16进制\">满眼的十六进制！这可怎么转换……</p>\n<h1 id=\"方法一：Python\"><a href=\"#方法一：Python\" class=\"headerlink\" title=\"方法一：Python\"></a>方法一：Python</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; hexstr &#x3D; b&quot;\\xe5\\xa5\\x97\\xe5\\x8f\\x82\\xe5\\xb7\\xb2\\xe4\\xbd\\xbf\\xe7\\x94\\xa8\\xe5\\xae\\x8c\\xe6\\xaf\\x95&quot;\n&gt;&gt;&gt; hexstr.decode(&quot;utf-8&quot;)\n&#39;套参已使用完毕&#39;\n&gt;&gt;&gt; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先定义字符串byte，然后使用<code>Python</code>自带的<code>decode</code>。最多像这样封装一个函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def hex2str(inp):\n    return inp.encode(&#39;raw_unicode_escape&#39;).decode(&#39;utf-8&#39;)\n\nprint(hex2str(&quot;\\xe5\\xa5\\x97\\xe5\\x8f\\x82\\xe5\\xb7\\xb2\\xe4\\xbd\\xbf\\xe7\\x94\\xa8\\xe5\\xae\\x8c\\xe6\\xaf\\x95&quot;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果还是觉得麻烦，最最最多用<code>input</code>封装成循环，写成转换小程序：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def hex2str(inp):\n    return inp.encode(&#39;raw_unicode_escape&#39;).decode(&#39;utf-8&#39;)\nwhile True:\n    inp &#x3D; input(&quot;&gt;&gt;&gt; &quot;)\n    print(hex2str(inp))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着打开Hopper，复制，打开终端，粘贴，然后就陷入了无穷的复制粘贴之中……</p>\n<h1 id=\"方法二：Hopper插件\"><a href=\"#方法二：Hopper插件\" class=\"headerlink\" title=\"方法二：Hopper插件\"></a>方法二：Hopper插件</h1><p>Hopper插件终于闪亮登场！IDA插件我们耳熟能详，但是Hopper插件几乎没有用过。按下<kbd>Cmd</kbd><kbd>Shift</kbd><kbd>P</kbd>，点击加号，即可创建新脚本，打开编辑。<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/29/hex2str-2.png\" alt=\"创建新脚本\"><br>我们需要制作一个选中文本，按下快捷键就可以进行转换的插件。</p>\n<p>Hopper插件编写的思想是：先有文件，再对文件进行操作。操作的过程也是先确定地址，再读取或写入字节。</p>\n<p>既然是对文件进行操作，所以首先要定义一个文件常量。所有的操作都依靠这个常量（以下是文档）：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>getCurrentDocument()</strong><br><em>[static]</em><br>Returns the current document.</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">doc &#x3D; Document.getCurrentDocument()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>紧接着我们需要获取三个常量：鼠标所在地址、所在段（便于写注释）、选中代码的区间。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>getCurrentAddress()</strong><br>Returns the address where the cursor currently is.<br><strong>getCurrentSegment()</strong><br>Returns the segment where the cursor is. Returns None if the current segment cannot be located.<br><strong>getSelectionAddressRange()</strong><br>Returns a list, containing two addresses. Those address represents the range of bytes covered by the selection.</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">addr &#x3D; doc.getCurrentAddress()\nseg &#x3D; doc.getCurrentSegment()\nsel &#x3D; doc.getSelectionAddressRange()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>有了鼠标所在的地址，我们就要读取这个地址的信息，进行转换。利用如下函数：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>readBytes(addr,length)</strong><br>Read bytes at a given address range. Returns False if the byte is read outside of the segment.<br>我们将基地址给到第一个参数中，长度给到第二个参数中，再用<code>Python</code>的库编码。</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bytes &#x3D; doc.readBytes(addr, sel[1] - 1 - sel[0])\nchinese &#x3D; str(bytes, encoding&#x3D;&#39;utf-8&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>最后我们需要在对应的地址上写注释：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>setCommentAtAddress(addr,comment)</strong><br>Set the prefix comment at a given address.</p></blockquote>\n<p>注意，这个方法是Class Segment类的，所以应该是<code>seg.xxx</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seg.setCommentAtAddress(sel[0], chinese)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>所有代码仅仅七行：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">doc &#x3D; Document.getCurrentDocument()\naddr &#x3D; doc.getCurrentAddress()\nseg &#x3D; doc.getCurrentSegment()\nsel &#x3D; doc.getSelectionAddressRange()\n\nbytes &#x3D; doc.readBytes(addr, sel[1] - 1 - sel[0])\nchinese &#x3D; str(bytes, encoding&#x3D;&#39;utf-8&#39;)\nseg.setCommentAtAddress(sel[0], chinese)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们现在随便在汇编文件中找到一行16进制字符串。由于Hopper的特性，只需把鼠标点击那一行，就会自动选择整行。然后再到Scripts中按下对应的插件快捷键，运行：<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/29/hex2str-3.png\" alt=\"运行效果\"><br>如此，我们就完成了插件的制作！</p>\n","text":"前言之所以这么说，是因为我也是零基础写的。今天上午本来想搞一搞某个软件，放到Hopper里一看：满眼的十六进制！这可怎么转换…… 方法一：Python&gt;&gt;&gt; hexstr &#x3D; b&quot;\\xe5\\xa5\\x97\\xe5\\x8f\\x82\\xe5\\xb...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"},{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9APython\"><span class=\"toc-text\">方法一：Python</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9AHopper%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">方法二：Hopper插件</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"从某加速器的逆向中学习调试分析","uid":"6977f74e17bf66c210227c98376290a7","slug":"从某加速器的逆向中学习调试分析","date":"2022-01-30T06:48:15.000Z","updated":"2022-03-21T12:41:16.944Z","comments":true,"path":"api/articles/从某加速器的逆向中学习调试分析.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/30/pc-1.png","text":"前言我电脑上的brew好久没有更新维护了，GitHub也许久没有登录，原因仅有一个，就是登不上去。在这个时代免费、合法的加速器越来越少。好不容易找到了一个加速器，对外声称免费，但打开一看早已因为缺乏资金改成了付费。它就是我们今天破解的目标。 分析我们可以事先把二进制用Hopper...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"破解一下学校的微机练习软件","uid":"7e603a51e1efa3dc095aed03c859c165","slug":"破解一下学校的微机练习软件","date":"2022-01-20T05:25:35.000Z","updated":"2022-03-21T05:14:38.907Z","comments":true,"path":"api/articles/破解一下学校的微机练习软件.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2022/01/20/ec-success.png","text":"前言如题，这次我来破解一下学校的微机练习软件。众所周知，我的逆向技术帖主要面向macOS和Linux，Windows逆向接触比较少，这次也是第一次破解Windows软件。因此技术方面的问题还请论坛的大佬指点。 分析说句没用的，学校的微机练习软件是用来练习微机中考的（我们这个省有）...","link":"","photos":[],"count_time":{"symbolsCount":730,"symbolsTime":"1 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}