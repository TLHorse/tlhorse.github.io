{"title":"PocketSphinx实现语音识别","uid":"55f018d1c31917539ae96f64efe0fa77","slug":"PocketSphinx实现语音识别","date":"2020-05-06T09:06:56.000Z","updated":"2021-12-12T02:56:09.905Z","comments":true,"path":"api/articles/PocketSphinx实现语音识别.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我最近一直在搞一个名叫 A.N.N.A. 的 <code>Python</code> 语音机器人项目（Anna 是什么单词的缩写我就不说了，自己猜去），需要用的强大的语音识别技术。翻看全网教程，没有一篇说的通的，要么就是教会如何购买百度AI会员，要么就是教如何翻墙使用谷歌语音……</p>\n<p>我最近发现<code>PocketSphinx</code>语音识别很不错，但是全网还是没有哪篇文章会告诉你，如何从头到尾下载这个库，用这个库进行语音识别，<strong>并且不在电脑上留下任何垃圾</strong>，可以随时删除的安装方法。然后你又会抱怨<code>PocketSphinx</code>有多么垃圾。</p>\n<p>在这篇文章里，我将告诉你如何安装<code>pocketsphinx</code>，并将其嵌入<code>speech_recognition</code>库，来更好地实现最终的语音转文字。</p>\n<h1 id=\"电脑环境\"><a href=\"#电脑环境\" class=\"headerlink\" title=\"电脑环境\"></a>电脑环境</h1><ul>\n<li>系统：<code>macOS Catalina</code> v10.15.3；</li>\n<li>软件<ul>\n<li><code>Xcode</code> v11（版本其实无所谓）；</li>\n<li><code>Homebrew</code> （安装命令：<code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code>）</li>\n<li><code>Python 3</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"安装PocketSphinx\"><a href=\"#安装PocketSphinx\" class=\"headerlink\" title=\"安装PocketSphinx\"></a>安装<code>PocketSphinx</code></h1><p>我们先来看一下<code>PocketSphinx</code>的依赖关系图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PocketSphinx\n    |\n    |-- SphinxBase\n    |  |--libogg\n    |  |--libvorbis\n    |  |--flac\n    |  |--libsamplerate\n    |  &#96;--libsndfile\n    &#96;-- Swig\n         &#96;--PCRE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><p>打开终端，运行如下<code>brew</code>命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ brew install pcre\n$ brew install swig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>其中，<code>swig</code>是<code>pocketsphinx</code>的依赖，<code>pcre</code>是<code>swig</code>的依赖。<code>swig</code>不需要自己编译，直接用<code>brew</code>安装即可。</p>\n</li>\n<li><p>再使用<code>brew</code>安装<code>SphinxBase</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ brew install SphinxBase<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令会将<code>SphinxBase</code>及其所有依赖安装到电脑上。现在，<code>brew list</code>应该如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">index_out_of_range@imac ~ % brew list\ncmu-sphinxbase\tlibogg\t\tlibvorbis\tportaudio\nflac\t\tlibsamplerate\topenssl@1.1\tswig\nldid\t\tlibsndfile\tpcre<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注：<code>portaudio</code>、<code>ldid</code>和<code>openssl</code>是我自己安装的，不用安装。</p>\n</blockquote>\n</li>\n<li><p>克隆<code>PocketSphinx</code>仓库，我们要在之后的步骤手动安装仓库，别问我为什么：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git clone git@github.com:cmusphinx&#x2F;pocketsphinx.git\n# 或者（推荐）\ngit clone --recursive https:&#x2F;&#x2F;github.com&#x2F;cmusphinx&#x2F;pocketsphinx.git\n# cd 到仓库\ncd pocketsphinx-python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：必须<code>clone</code>，直接下载仓库会有文件缺失，因为这个库引用了其它仓库代码。如果网速太慢，可以fq或者把仓库导入<code>gitee</code>。</p>\n</li>\n<li><p>==使用<code>vim</code>更改关键文件==（如果直接用<code>pip</code>安装，会有文件出错<a href=\"https://github.com/bambocher/pocketsphinx-python/issues/28\">^1</a>）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim deps&#x2F;sphinxbase&#x2F;src&#x2F;libsphinxad&#x2F;ad_openal.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来用<code>vim</code>把</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">#include &lt;al.h&gt;\n#include &lt;alc.h&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>改为</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">#include &lt;OpenAL&#x2F;al.h&gt;\n#include &lt;OpenAL&#x2F;alc.h&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>使用<code>setup.py</code>安装（至关重要的一步，仔细看命令！）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 setup.py install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意是<code>python3</code>而不是<code>python</code>。我一开始没加3，结果安装到<code>python2</code>系统目录去了。</p>\n</li>\n</ol>\n<h2 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h2><p>使用如下命令测试<code>PocketSphinx</code>是否安装成功：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">index_out_of_range@imac ~ % python3\nPython 3.8.2 (v3.8.2:7b3ab5921f, Feb 24 2020, 17:52:18)\n[Clang 6.0 (clang-600.0.57)] on darwin\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import pocketsphinx\n&gt;&gt;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果像我一样<code>import</code>没有报错，就是安装成功了！</p>\n<h1 id=\"语音识别\"><a href=\"#语音识别\" class=\"headerlink\" title=\"语音识别\"></a>语音识别</h1><h2 id=\"英文识别\"><a href=\"#英文识别\" class=\"headerlink\" title=\"英文识别\"></a>英文识别</h2><p>安装完<code>PocketSphinx</code>后，就进入到我们的第二个阶段，嵌入<code>speech_recognition</code>模块进行语音识别了。你可以将<code>speech_recognition</code>模块理解为众多语音识别SDK与API的一个高层封装模块。使用<code>pip install SpeechRecognition</code>安装即可。</p>\n<p>接下来，新建一个<code>.py</code>文件，输入如下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 注：安装时用的是 SpeechRecognition 这一名称，但是注意 import 时要用 speech_recognition 这一名称。\nimport speech_recognition as sr\n\nr &#x3D; sr.Recognizer()\nmic &#x3D; sr.Microphone()\n\ndef recognize(r, mic, lang&#x3D;&quot;en-US&quot;):\n    print(&quot;Please wait...&quot;, end&#x3D;&quot;&quot;) # 在开始录音前等待\n    \n    with mic as source:\n        r.adjust_for_ambient_noise(source)\n        backspace &#x3D; &quot;\\r&quot; * 14 # 退格字符\n        print(f&#39;&#123;backspace&#125;Say something: &#39;, end&#x3D;&quot;&quot;)\n        audio &#x3D; r.listen(source)\n    \n    # 调用识别函数（这个函数只有安装了 PocketSphinx 才能调用），具体方法看官方文档\n    result &#x3D; r.recognize_sphinx(audio, language&#x3D;lang)\n    \n    # 打印并返回结果\n    print(result)\n    return result\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    recognize(r, mic)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用终端运行代码（我用<code>VSCode</code>不知为何打不开麦克风）：程序首先会打印<code>Please wait...</code>，等待一会<code>Please wait...</code>会变成<code>Say something:</code>，之后说一句英文（比如<code>hello</code>），程序就会打印出<code>hello</code>。</p>\n<p>但是问题来了，我们是中国人啊！于是你把<code>recognize(r, mic)</code>改成了<code>recognize(r, mic, lang=&quot;zh-CN&quot;)</code>，程序报错了。</p>\n<h2 id=\"中文识别\"><a href=\"#中文识别\" class=\"headerlink\" title=\"中文识别\"></a>中文识别</h2><p>说白了，程序的报错原因就是你没有中文语言模型，<code>PocketSphinx</code>是默认只有英文的。接下来我们添加中文模型：</p>\n<ol>\n<li>到 SourceForge 的<a href=\"https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models\">这个项目</a>里，找到 Mandarin（普通话），点进去有个<code>tar</code>包，下载下来并解压。</li>\n<li>将解压出的目录改名为<code>zh-CN</code>，拖动到<code>/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/speech_recognition/pocketsphinx-data/</code>目录下。</li>\n<li>按图中方式，将<code>zh-CN</code>目录里的文件按<code>en-US</code>目录里文件的命名规律改名：<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/4/30/py-sphinx-chname.jpg\" alt=\"改名\"></li>\n</ol>\n<p>现在把程序里<code>recognize(r, mic)</code>改成<code>recognize(r, mic, lang=&quot;zh-CN&quot;)</code>，程序成功运行！不过通过实验发现，这个模型识别出来的中文貌似很垃圾……只能自己训练模型了……</p>\n<h1 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h1>","text":"前言我最近一直在搞一个名叫 A.N.N.A. 的 Python 语音机器人项目（Anna 是什么单词的缩写我就不说了，自己猜去），需要用的强大的语音识别技术。翻看全网教程，没有一篇说的通的，要么就是教会如何购买百度AI会员，要么就是教如何翻墙使用谷歌语音…… 我最近发现Pocke...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%B5%E8%84%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">电脑环境</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85PocketSphinx\"><span class=\"toc-text\">安装PocketSphinx</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">测试安装</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">语音识别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8B%B1%E6%96%87%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">英文识别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%87%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">中文识别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#END\"><span class=\"toc-text\">END</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"制作一个 Deepin Linux 启动盘","uid":"b236fef24e94acfbb460b9eae3617ab1","slug":"制作一个 Deepin Linux 启动盘","date":"2020-05-20T02:47:27.000Z","updated":"2021-12-12T02:58:02.272Z","comments":true,"path":"api/articles/制作一个 Deepin Linux 启动盘.json","keywords":null,"cover":[],"text":"前言Linux 乃是操作系统之王，其可玩性、扩展性、操作性和美化性远远超过了 Windows、OS X（Darwin）等传统操作系统。Deepin Linux 是 Linux 发行版中较好的一个。我们来比较一下 Linux 的安装方式： 安装到双系统：将 Linux 与 Wind...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"系统底层","slug":"系统底层","count":1,"path":"api/tags/系统底层.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"执行一个优美的并行程序","uid":"75b57553f8bf0755102a1265e2955d26","slug":"执行一个优美的并行程序","date":"2020-04-30T02:49:36.000Z","updated":"2020-05-06T09:53:19.000Z","comments":true,"path":"api/articles/执行一个优美的并行程序.json","keywords":null,"cover":[],"text":"场景我最近用Python的print，通过打印一帧帧的进度条，实现了一个进度条样式，顺便跟大家分享一下代码： import time AT_PROGRESS_BAR &#x3D; [ &quot;( )&quot;, &quot;(@ )&quot;, &quot;(@@ )&q...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}