{"title":"再战CleanMyMac X完美暴破","uid":"9c72c5d43e14fe1174ca7f572f376ee9","slug":"再战CleanMyMac X完美暴破","date":"2021-02-07T13:20:05.000Z","updated":"2022-01-30T06:33:25.366Z","comments":true,"path":"api/articles/再战CleanMyMac X完美暴破.json","keywords":null,"cover":[],"content":"<blockquote>\n<p><strong>因为<code>CleanMyMac X</code>的破解屡次被代理商投诉，并且有被黑心网站挖掘文章的可能，故不能发布成品。文章这么长，其实是就是几个<code>frida-trace</code>和<code>Hopper</code>，更多的是分析，再说论坛上的同志都不是白给的，肯定搞得定。</strong></p>\n</blockquote>\n<p>自从写了<a href=\"https://tlhorse.github.io/posts/16190/\">《一次意外的 CleanMyMac X 破解》</a>后，在手的CleanMyMac X 4.5.3就一直没更新换代。笔者撰写此文，CleanMyMac X 已经发展到4.7.4了，于是便想着重新破解一遍。如果还未读过上篇文章的，建议读一遍。</p>\n<h1 id=\"Hopper分析\"><a href=\"#Hopper分析\" class=\"headerlink\" title=\"Hopper分析\"></a>Hopper分析</h1><p>按照上一篇文章的思路，我们先找<code> -[CMActivationManager isAppActivated]</code>这个函数。竟然还在：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/02/11/cmmnew-search-sym.png\" alt=\"cmmnew-search-sym\"></p>\n<p>但是，为了避免像我破解4.6.7时频繁输密码的问题，安装<code>frida</code>，我们使用<code>frida-trace</code>进行调试修改：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">frida-trace -m &quot;-[* isAppActivated]&quot; &quot;CleanMyMac X&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令我需要解释一下。<code>-m</code>是trace（跟踪）<code>OBJC_METHOD</code>的参数，后面第一个字符串参数是一个搜索关键词，其中*是通配符，不论是哪个class的<code>isAppActivated</code>都会被我们监视到。后面的<code>&quot;CleanMyMac X&quot;</code>是进程名称。</p>\n<p>但是可惜的是在激活命令之前，我们需要把CMM打开，这样<code>frida</code>才能attach到进程。也就是说，CMM和命令几乎要同时打开。我在调试的过程中一直是把app和回车同时按下去，很麻烦，知道写文章才发觉自己好可爱，为什么不用下面的命令呢：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">open &#x2F;Applications&#x2F;CleanMyMac\\ X.app &amp;&amp; frida-trace -m &quot;-[* isAppActivated]&quot; &quot;CleanMyMac X&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>之后我们会看到下面的输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Instrumenting...                                                        \n-[CMActivationManager isAppActivated]: Auto-generated handler at &quot;&#x2F;Users&#x2F;alex080318&#x2F;Developer.localized&#x2F;CMMTweak&#x2F;__handlers__&#x2F;CMActivationManager&#x2F;isAppActivated.js&quot;\n-[CMSubscriptionStatusManager isAppActivated]: Auto-generated handler at &quot;&#x2F;Users&#x2F;alex080318&#x2F;Developer.localized&#x2F;CMMTweak&#x2F;__handlers__&#x2F;CMSubscriptionStatusManager&#x2F;isAppActivated.js&quot;\n-[CMSubscriptionRequestSchedule isAppActivated]: Auto-generated handler at &quot;&#x2F;Users&#x2F;alex080318&#x2F;Developer.localized&#x2F;CMMTweak&#x2F;__handlers__&#x2F;CMSubscriptionRequestSchedule&#x2F;isAppActivated.js&quot;\nStarted tracing 3 functions. Press Ctrl+C to stop.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到有三个函数被调用，也就是说这是三个函数都得被hook，终于不用像以前傻呵呵只改一个函数了。</p>\n<h1 id=\"破解过程\"><a href=\"#破解过程\" class=\"headerlink\" title=\"破解过程\"></a>破解过程</h1><p>为了省时间，在这里就不用Hopper了。我们在<code>frida</code>生成的<code>__handlers__</code>文件夹（位于当前目录，也就是在trace之前要<code>cd</code>到一个准备好的目录）中，分别将三个函数的<code>onLeave</code>改成1：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">onLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">log<span class=\"token punctuation\">,</span> retval<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  retval<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>之后再运行<code>frida-trace</code>，打开软件，提示信息消失。正当欣喜若狂开始清理垃圾时，突然停止清理，提示我买会员。噩耗传来：<strong>这是伪破解。不过别泄气啊。</strong></p>\n<p>仔细观察软件会发现，有的地方是未注册的UI，有的地方是已注册的UI，也就是暴破函数没找全。我们查看一下<code>-[CMActivationManager isAppActivated]</code>伪代码，发现，里面的<code>sub_100334850</code>在做着不为人知的事情：</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">&#x2F;* @class CMActivationManager *&#x2F;\n-(char)isAppActivated &#123;\n    rax &#x3D; sub_100334850(0x0);\n    return rax;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>sub_100334850</code>：</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">int sub_100334850(int arg0) &#123;\n    var_2E8 &#x3D; arg0;\n    rax &#x3D; objc_autoreleasePoolPush();\n    var_300 &#x3D; 0x0;\n    var_2A0 &#x3D; &amp;var_300;\n    var_318 &#x3D; rax;\n    if (**_NSApp !&#x3D; 0x0) &#123;\n            var_320 &#x3D; qword_1007a3b28(**_NSApp, 0x1007a3b70);\n            var_328 &#x3D; var_320;\n    &#125;\n    else &#123;\n            var_328 &#x3D; 0x0;\n    &#125;\n    var_2A8 &#x3D; var_328;\n    sub_100392510(&quot;DM_ENABLE_DEBUG_LOGGING_ACTIVATION&quot;, @&quot;_get_: %p&quot;, var_2A8, 0x0, r8, r9, stack[-1704]);\n    if ((var_2A8 &#x3D;&#x3D; 0x0) || (var_2A0 &#x3D;&#x3D; 0x0)) goto loc_1003349b4;\n  &#x2F;&#x2F; ......<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码很长，就不全部展示了。<kbd>Shift</kbd><kbd>X</kbd>查看交叉引用，顺藤摸瓜，结果让我眼前大吃一惊，好多啊……</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/02/08/cmmnew-subx.png\" alt=\"搜索交叉引用\"></p>\n<p>原来，这个sub是个判断激活的进程<strong>，不止<code>isAppActivated</code>调用了它，还有许许多多的类和方法，包括<code>EntryPoint</code>。</strong></p>\n<p>想要hook这个sub，还需获取在内存中的地址，着实麻烦，就不写<code>frida</code>了。<strong>Hopper直接改返回值。</strong>双击空格，切到ASM模式：</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">mov rax, 0x1\nret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><kbd>Cmd</kbd><kbd>Shift</kbd><kbd>E</kbd>，生成可执行文件，给源文件改名，替换——三步走，之后打开<code>CleanMyMac X</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/02/08/cmmnew-ked-1.png\" alt=\"1\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/02/08/cmmnew-ked-2.png\" alt=\"2\"></p>\n<p>祝大家新年快乐，牛年大吉，破解技术共获提升，软件使用快乐！</p>\n","text":" 因为CleanMyMac X的破解屡次被代理商投诉，并且有被黑心网站挖掘文章的可能，故不能发布成品。文章这么长，其实是就是几个frida-trace和Hopper，更多的是分析，再说论坛上的同志都不是白给的，肯定搞得定。 自从写了《一次意外的 CleanMyMac X 破解》后...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Hopper%E5%88%86%E6%9E%90\"><span class=\"toc-text\">Hopper分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">破解过程</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"你没看错：动手开发GUI简单操作系统（一）","uid":"3a5c91716103437f37cc384f7b5075da","slug":"你没看错：动手开发GUI简单操作系统（一）","date":"2021-02-09T14:26:38.000Z","updated":"2021-02-11T10:43:36.184Z","comments":true,"path":"api/articles/你没看错：动手开发GUI简单操作系统（一）.json","keywords":null,"cover":[],"text":"前言今天我终于想好发布这篇文章，以前自己一直在摸索开发，保证100%原创。这个操作系统异常简单，没有Windows的高级，没有OS X的华丽，更没有Linux的强大——也别指望了，对于个人来说根本没多少生产力，只能用来学习知识，自己整着玩。但是，OS开发的资料太少了，“你没看错”...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"《你没听错：动手开发GUI简单操作系统》系列","slug":"《你没听错：动手开发GUI简单操作系统》系列","count":2,"path":"api/tags/《你没听错：动手开发GUI简单操作系统》系列.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"院落伴我远行","uid":"0ee262cfab24df6115fdb9f0a0241599","slug":"院落伴我远行","date":"2021-02-05T11:08:58.000Z","updated":"2022-03-20T08:02:46.400Z","comments":true,"path":"api/articles/院落伴我远行.json","keywords":null,"cover":null,"text":"我们家的奢侈，不在于西洋家具，不在于开阔视野，不在于现代艺术，也不在于高端科技。但是，在高楼耸立、跟电梯打交道的今天，能有一个陪伴我13年的小院子，自然、古朴、清闲，我已经很知足了。 这个小院，竟牵起我的不少思绪，教会我不少道理。 与我同庚的房子并不豪华，当我寻思何要执着于此，我...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":33,"path":"api/categories/随笔.json"}],"tags":[{"name":"记叙","slug":"记叙","count":7,"path":"api/tags/记叙.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}