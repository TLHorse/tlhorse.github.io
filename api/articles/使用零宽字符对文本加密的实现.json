{"title":"使用零宽字符对文本加密的实现","uid":"f8fd7dab5a7c55790887e53b7dabdd36","slug":"使用零宽字符对文本加密的实现","date":"2021-02-02T01:41:42.000Z","updated":"2021-02-04T13:32:46.262Z","comments":true,"path":"api/articles/使用零宽字符对文本加密的实现.json","keywords":null,"cover":[],"content":"<blockquote>\n<p>本文为 <a href=\"http://www.52pojie.cn/\">www.52pojie.cn</a> 首发</p>\n<p>《使用零宽字符对文本加密的实现》</p>\n<p>@TLHorse</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说来话长。其实就是前几天我看到了一篇介绍Unicode的文章，里面介绍Unicode字符的广泛性。其中有一类字符叫做零宽字符，它们在电脑上输入，不可见，也不可打印，甚至输入都不会占空间，作用是控制文字排列或解决个别语言中的排版问题。</p>\n<p>常见的零宽字符有以下六种：</p>\n<table>\n<thead>\n<tr>\n<th>中文名</th>\n<th>英文名</th>\n<th>U+</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>零宽度空格符</td>\n<td>zero-width space</td>\n<td>U+200B</td>\n<td>用于较长单词的换行分隔。</td>\n</tr>\n<tr>\n<td>零宽度非断空格符</td>\n<td>zero width no-break space</td>\n<td>U+FEFF</td>\n<td>用于阻止特定位置的换行分隔。</td>\n</tr>\n<tr>\n<td>零宽度连字符</td>\n<td>zero-width joiner</td>\n<td>U+200D</td>\n<td>用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果。</td>\n</tr>\n<tr>\n<td>零宽度断字符</td>\n<td>zero-width non-joiner</td>\n<td>U+200C</td>\n<td>用于阿拉伯文、德文、印度语系等文字中，阻止会发生连字的字符间的连字效果。</td>\n</tr>\n<tr>\n<td>左至右符</td>\n<td>left-to-right mark</td>\n<td>U+200E</td>\n<td>用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右。</td>\n</tr>\n<tr>\n<td>右至左符</td>\n<td>right-to-left mark</td>\n<td>U+200F</td>\n<td>用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左。</td>\n</tr>\n</tbody></table>\n<p>使用这些零宽字符可以实现发空白消息、发空白朋友圈等效果。不妨动脑筋一想，我们可以把这几种字符组合起来，就可以实现加密字符串的效果。</p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>这篇文章咱们只介绍一个初步实现，说不定以后我会出后续，给应用添加更多功能。下面是加解密的流程图。<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2021/02/04/zwe-graph.jpg\" alt=\"ZWE流程图\"><br>总之我认为解密过程较为繁琐。</p>\n<h1 id=\"核心实现\"><a href=\"#核心实现\" class=\"headerlink\" title=\"核心实现\"></a>核心实现</h1><p>激动人心的时刻到啦。让我们一步步编写。<br>首先在全局定义三个常量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ZW_ONE &#x3D; u&quot;\\u200b&quot; # 用来翻译1\nZW_ZERO &#x3D; u&quot;\\u200c&quot; # 用来翻译0\nZW_SEP &#x3D; u&quot;\\u200d&quot; # 用来翻译字符之间的间隔<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"加密函数-str2zwstr-origin\"><a href=\"#加密函数-str2zwstr-origin\" class=\"headerlink\" title=\"加密函数 str2zwstr(origin)\"></a>加密函数 <code>str2zwstr(origin)</code></h2><p>首先我们新建一个空数组，用来存储字符串每一项，并且遍历明文，使明文的每个字符<strong>先用<code>ord()</code>转换成十进制数字，再用<code>bin()</code>转换成二进制。再转换成字符串格式，最后去掉<code>0b</code>前缀</strong>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bin_text &#x3D; []\nfor char in origin:\n    bin_text.append(str(bin(ord(char))).lstrip(&#39;0b&#39;))\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>再创建一个空字符串，用来存储最终的结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">final_str &#x3D; &quot;&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>之后进行两次遍历，先浅层遍历<code>bin_text</code>，然后为每一项深层遍历：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for item in bin_text: # 遍历大数组每一项\n    for binchar in item: # 遍历每一项中的0和1\n        final_str +&#x3D; ZW_ONE if binchar &#x3D;&#x3D; &quot;1&quot; else ZW_ZERO # 把0、1分别翻译成两种零宽度字符串\n    final_str +&#x3D; ZW_SEP # 每一项（字符）结束后，插入一个分隔符号\nfinal_str.rstrip(ZW_SEP) # 去掉\nreturn final_str<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后返回<code>final_str</code>即可。<br>整体代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def str2zwstr(origin):\n    bin_text &#x3D; []\n    for char in origin:\n        bin_text.append(str(bin(ord(char))).lstrip(&#39;0b&#39;))\n\n    final_str &#x3D; &quot;&quot;\n    for item in bin_text:\n        for binchar in item:\n            final_str +&#x3D; ZW_ONE if binchar &#x3D;&#x3D; &quot;1&quot; else ZW_ZERO\n        final_str +&#x3D; ZW_SEP\n    final_str.rstrip(ZW_SEP)\n    return final_stry<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"解密函数zwstr2str-enc-str\"><a href=\"#解密函数zwstr2str-enc-str\" class=\"headerlink\" title=\"解密函数zwstr2str(enc_str)\"></a>解密函数<code>zwstr2str(enc_str)</code></h2><p>首先我建议大家再看看基本思路中的流程图。解密不大相同。因为一开始我们要把翻译后的数据存储到第一个字符上，但是遇到分隔符后，我们又得新建一个字符，并把接下来的翻译后的数据存储到第二个字符串上，因此我们要编写一个函数<code>apponlast(arr, sth)</code>，每次运行，都将sth拼接到arr的最后一项中，如果arr的项数为0，即新增一个元素。</p>\n<p>我这里用的代码极为简洁：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def apponlast(arr, sth):\n    la &#x3D; len(arr) # la 是 arr 的长度\n    if la: arr[la-1] +&#x3D; sth # 如果长度不为0，那么就把 arr 的最后一项与 sth 字符串拼接\n    else: arr.append(sth) # 如果数组里没有元素，新建一个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>之后编写解密函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def zwstr2str(enc_str):\n    arr_oz &#x3D; [] # 由0和1构成的字符串构成的数组\n    for char in enc_str: # 在密文里遍历\n        if char &#x3D;&#x3D; ZW_ONE: apponlast(arr_oz, &quot;1&quot;) # 如果是\\200b，翻译成1\n        elif char &#x3D;&#x3D; ZW_ZERO: apponlast(arr_oz, &quot;0&quot;) # 如果是\\200c，翻译成0\n        elif char &#x3D;&#x3D; ZW_SEP: arr_oz.append(&quot;&quot;) # 如果是分隔符，把数组新建一项，重新开始循环\n        else: print(&quot;Input contains non-ZW string. Aborted.&quot;); getinput() # 如果密文中有非零宽字符，终止解密并回到程序主函数（我们一会要编写）\n\n    for idx in range(0, len(arr_oz)-1): # 遍历这个由0和1构成的字符串构成的数组\n        arr_oz[idx] &#x3D; chr(int(arr_oz[idx], 2)) # 把每一项先转换为int（注意二进制参数），然后用chr转换为字符\n\n    return &quot;&quot;.join(arr_oz) # 拼接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"完善程序\"><a href=\"#完善程序\" class=\"headerlink\" title=\"完善程序\"></a>完善程序</h1><p>接下来我们为程序添加一个主函数，并且加些花哨的功能。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    pbanner()\n    getinput()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>pbanner()</code>用来打印banner：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\ndef pbanner():\n    banner &#x3D; colored(f&quot;&quot;&quot;\n      ______\n     &#x2F;___  &#x2F;\\\\  Zerowidth String Encoder | @TLHorse from 52pojie\n    &#x2F;&#x2F;  &#x2F; &#x2F; \\\\\\\\ Type in then ENTER. The encoded string\n    \\\\\\\\ &#x2F; &#x2F;__&#x2F;&#x2F; will be copied &amp; printed.\n     \\&#x2F;_____&#x2F;  Commands | ::openweb:: ::banner:: ::quit:: ::switchmode::\n    &quot;&quot;&quot;, &#39;yellow&#39;)\n    print(banner)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要说明一下，上面的<code>colored</code>函数需要依赖一个第三方库<code>termcolor</code>，可以打印出彩色字符串。</p>\n<p>我们在全局设置两个变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">MODE_ENCODE &#x3D; True # 用来记录模式是加密还是解密\nLAST_RESULT &#x3D; &quot;&quot; # 用来记录上次操作的结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>getinput</code>是一个递归，可以像命令行一样获取用户输入，代码比较复杂，功能很多，本来是有注释的，结果浏览器编辑的时候不小心给关了，没有恢复成功。大家自己摸索吧：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def getinput():\n    global MODE_ENCODE, LAST_RESULT\n    info &#x3D; &quot;&quot;\n    if MODE_ENCODE: info &#x3D; colored(&quot;ENCODE&quot;, &#39;red&#39;)\n    else: info &#x3D; colored(&quot;DECODE&quot;, &#39;green&#39;)\n    input_str &#x3D; input(f&#39;[&#123;info&#125;] &#39;)\n   \n    if   input_str &#x3D;&#x3D; &#39;::openweb::&#39;:    os.system(&#39;open https:&#x2F;&#x2F;www.52pojie.cn&#39;) # 打开吾爱网页\n    elif input_str &#x3D;&#x3D; &#39;::banner::&#39;:     pbanner() #打印banner\n    elif input_str &#x3D;&#x3D; &#39;::quit::&#39;:       sys.exit(0) #退出程序\n    elif input_str &#x3D;&#x3D; &#39;::switchmode::&#39;: MODE_ENCODE &#x3D; False if MODE_ENCODE else True #切换加解密\n    elif input_str &#x3D;&#x3D; &#39;::cp::&#39;:         os.system(f&#39;echo &#123;LAST_RESULT&#125; | pbcopy&#39;) #复制结果\n\n    if input_str.startswith(&quot;::&quot;) and input_str.endswith(&quot;::&quot;): getinput() #检测是否为命令\n   \n    out &#x3D; str2zwstr(input_str) if MODE_ENCODE &#x3D;&#x3D; True else zwstr2str(input_str)\n    print(colored(&#39;     &gt;&gt;&gt; &quot;&#39;, &#39;green&#39;)+ out + colored(&#39;&quot;&#39;, &#39;green&#39;))\n    LAST_RESULT &#x3D; out\n    getinput()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>别忘了import进类库：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os, sys\nfrom termcolor import colored<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>大功告成！</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>首先，想说明一点，文中的结果复制功能是基于pbcopy命令的，这个只有Linux和Unix有，Windows没有。所以Windows小伙伴们记得使用<code>pyperclip</code>库实现复制功能。</p>\n<p>其次，我也不是计算机专业人士，所以代码的繁琐与不妥当之处欢迎在评论区指正。</p>\n<p>所有代码长这样：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os, sys\nfrom termcolor import colored\n\nZW_ONE &#x3D; u&quot;\\u200b&quot;\nZW_ZERO &#x3D; u&quot;\\u200c&quot;\nZW_SEP &#x3D; u&quot;\\u200d&quot;\n\nMODE_ENCODE &#x3D; True\nLAST_RESULT &#x3D; &quot;&quot;\n\ndef pbanner():\n    banner &#x3D; colored(f&quot;&quot;&quot;\n      ______\n     &#x2F;___  &#x2F;\\\\  Zerowidth String Encoder | @TLHorse from 52pojie\n    &#x2F;&#x2F;  &#x2F; &#x2F; \\\\\\\\ Type in then ENTER. The encoded string will be printed.\n    \\\\\\\\ &#x2F; &#x2F;__&#x2F;&#x2F; Commands | ::openweb:: ::banner:: ::quit:: ::switchmode::\n     \\&#x2F;_____&#x2F;  ::cp::\n    &quot;&quot;&quot;, &#39;yellow&#39;)\n    print(banner)\n\ndef apponlast(arr, sth):\n    la &#x3D; len(arr)\n    if la: arr[la-1] +&#x3D; sth\n    else: arr.append(sth)\n\ndef str2zwstr(origin):\n    bin_text &#x3D; []\n    for char in origin:\n        bin_text.append(str(bin(ord(char))).lstrip(&#39;0b&#39;))\n\n    final_str &#x3D; &quot;&quot;\n    for item in bin_text:\n        for binchar in item:\n            final_str +&#x3D; ZW_ONE if binchar &#x3D;&#x3D; &quot;1&quot; else ZW_ZERO\n        final_str +&#x3D; ZW_SEP\n    final_str.rstrip(ZW_SEP)\n    return final_str\n\ndef zwstr2str(enc_str):\n    arr_oz &#x3D; []\n    for char in enc_str:\n        if char &#x3D;&#x3D; ZW_ONE: apponlast(arr_oz, &quot;1&quot;)\n        elif char &#x3D;&#x3D; ZW_ZERO: apponlast(arr_oz, &quot;0&quot;)\n        elif char &#x3D;&#x3D; ZW_SEP: arr_oz.append(&quot;&quot;)\n        else: print(&quot;Input contains non-ZW string. Aborted.&quot;); getinput()\n\n    for idx in range(0, len(arr_oz)-1):\n        arr_oz[idx] &#x3D; chr(int(arr_oz[idx], 2))\n\n    return &quot;&quot;.join(arr_oz)\n\ndef getinput():\n    global MODE_ENCODE, LAST_RESULT\n    info &#x3D; &quot;&quot;\n    if MODE_ENCODE: info &#x3D; colored(&quot;ENCODE&quot;, &#39;red&#39;)\n    else: info &#x3D; colored(&quot;DECODE&quot;, &#39;green&#39;)\n    input_str &#x3D; input(f&#39;[&#123;info&#125;] &#39;)\n   \n    if   input_str &#x3D;&#x3D; &#39;::openweb::&#39;:    os.system(&#39;open https:&#x2F;&#x2F;www.52pojie.cn&#39;)\n    elif input_str &#x3D;&#x3D; &#39;::banner::&#39;:     pbanner()\n    elif input_str &#x3D;&#x3D; &#39;::quit::&#39;:       sys.exit(0)\n    elif input_str &#x3D;&#x3D; &#39;::switchmode::&#39;: MODE_ENCODE &#x3D; False if MODE_ENCODE else True\n    elif input_str &#x3D;&#x3D; &#39;::cp::&#39;:         os.system(f&#39;echo &#123;LAST_RESULT&#125; | pbcopy&#39;)\n\n    if input_str.startswith(&quot;::&quot;) and input_str.endswith(&quot;::&quot;): getinput()\n   \n    out &#x3D; str2zwstr(input_str) if MODE_ENCODE &#x3D;&#x3D; True else zwstr2str(input_str)\n    print(colored(&#39;     &gt;&gt;&gt; &quot;&#39;, &#39;green&#39;)+ out + colored(&#39;&quot;&#39;, &#39;green&#39;))\n    LAST_RESULT &#x3D; out\n    getinput()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    pbanner()\n    getinput()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://share.weiyun.com/PyUOPC6F\">下载.py格式代码｜密码：zsetlh</a></p>\n<p>最后我先说明，当我把论坛上的文章贴到博客里，我惊奇地发现论坛阅读量少得可怜。但我写文章终究不是给别人看的。</p>\n","text":" 本文为 www.52pojie.cn 首发 《使用零宽字符对文本加密的实现》 @TLHorse 前言说来话长。其实就是前几天我看到了一篇介绍Unicode的文章，里面介绍Unicode字符的广泛性。其中有一类字符叫做零宽字符，它们在电脑上输入，不可见，也不可打印，甚至输入都不会...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"},{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">基本思路</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">核心实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0-str2zwstr-origin\"><span class=\"toc-text\">加密函数 str2zwstr(origin)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0zwstr2str-enc-str\"><span class=\"toc-text\">解密函数zwstr2str(enc_str)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%96%84%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">完善程序</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8E%E8%AE%B0\"><span class=\"toc-text\">后记</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"唯心论","uid":"3a0e8a0c5221851b025b550b01e47bae","slug":"唯心论","date":"2021-02-04T12:23:18.000Z","updated":"2022-03-20T08:02:46.401Z","comments":true,"path":"api/articles/唯心论.json","keywords":null,"cover":null,"text":" fb9485e9b3db22a0b31c2c272a92e2cc5035ff1dd42ac50a34f7117da1026898319829e11ac26fd2dcf632e6a2e9ac3032e33979b46672674512a802bfbd469ad1cce581666...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"随笔","slug":"随笔","count":33,"path":"api/categories/随笔.json"}],"tags":[{"name":"杂文","slug":"杂文","count":1,"path":"api/tags/杂文.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"硬核输密码","uid":"d078a1992786209f6ee895552b5e3346","slug":"硬核输密码","date":"2020-06-29T03:51:11.000Z","updated":"2021-01-28T02:38:15.339Z","comments":true,"path":"api/articles/硬核输密码.json","keywords":null,"cover":[],"text":"前言好久没写文章了，今天输出一篇。首先，为了防止误判我是标题党，先解释一下在这篇文章里我要做什么。 以前我在《【Mac】一次意外的 CleanMyMac X 破解》里破解过CleanMyMac X（注：这篇帖子已被移动），但是最近CleanMyMac X更新，所以我便把旧版本的C...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"},{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}