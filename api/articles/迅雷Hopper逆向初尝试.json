{"title":"迅雷Hopper逆向初尝试","uid":"e917830c42cefe98151fe741aa448307","slug":"迅雷Hopper逆向初尝试","date":"2020-01-28T09:40:35.000Z","updated":"2021-12-12T02:59:50.000Z","comments":true,"path":"api/articles/迅雷Hopper逆向初尝试.json","keywords":null,"cover":[],"content":"<blockquote>\n<p>破解目标：迅雷v3.0.9，登陆即是会员！  </p>\n</blockquote>\n<h1 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h1><p>这也不是第一次想着进行破解二进制了。以前用过IDA、OD、010等软件，才知道，破解既困难，又有趣。</p>\n<p>为什么我要用Hopper Disassembler进行破解？因为Hopper是一款针对Mac&amp;Unix类系统的破解软件；那为什么又要选择迅雷呢v3.0.9.2892？我浏览过迅雷的所有版本，只有这个版本的迅雷是一个难度适中、易破解、成就感高而又实用的App。所以，今天写一篇破解迅雷v3.0.9的详细笔记，分享给大家。</p>\n<p>但是——也确实是这样——总有那么些人通过不法方式修改别人的东西，我就很讨厌这类人。因此，<strong>此篇文章仅供研究学习，切勿商用或者广泛传播，否则后果自负</strong>！</p>\n<blockquote>\n<p>注：网站里的图片点开即可查看大图。</p>\n</blockquote>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><ol>\n<li> <a href=\"https://www.hopperapp.com/\">Hopper Disassembler</a>，逆向工程工具，可让反汇编，反编译和调试应用程序。</li>\n<li>迅雷（Thunder）v3.0.9.2892。以下迅雷简称XL。<a href=\"http://down.sandai.net/mac/thunder_3.0.9.2892.dmg\">官方下载链接</a></li>\n<li>一台Mac或iMac，能不用虚拟机就不用。最好是MacOS Catalina，为了保证Hopper与XL的正常运行。（其实Hopper也有Linux版本，但在虚拟机下不太好使）</li>\n<li>思路清晰且冷静的大脑。</li>\n</ol>\n<h1 id=\"开始破解\"><a href=\"#开始破解\" class=\"headerlink\" title=\"开始破解\"></a>开始破解</h1><h2 id=\"导入分析\"><a href=\"#导入分析\" class=\"headerlink\" title=\"导入分析\"></a>导入分析</h2><p>首先，我们从应用程序里找到<code>Thunder</code>这个App，右键——显示包内容，之后进入目录<code>/Contents/MacOS</code>，可以找到<code>Thunder</code>这个可执行文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/find-exec.png\" alt=\"查找可执行文件\"></p>\n<p>这个可执行文件包括着整个App的运行逻辑、顺序、程序等等内容，但是不包括应用的资源。这个文件就是应用运行的关键，也是我们破解的关键。</p>\n<p>接下来，我们打开Hopper。进入应用界面后，把可执行文件拖拽到界面的中间部分。<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-drag-analysis.png\" alt=\"拖动\"></p>\n<p>接下来，Hopper会弹出提示，保持默认，一路OK即可。<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-warning.png\" alt=\"提示框\"></p>\n<p>等着进度条走完（观察窗口右下角的<code>Working</code>字样）。像迅雷这样的小软件，2秒钟就够了。接下来，一幅宏伟壮丽的景象会出现在你眼前。<br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-main-ui.png\" alt=\"主页面\"></p>\n<p>这是Hopper的主页面。分为5个部分：上面是工具条：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-toolbar-usage.png\" alt=\"工具条用法\"></p>\n<p>左边是搜索区，可以搜索函数、字符串、星标代码等；中间是主要工作区域，里面包含的内容可以通过工具条中按键调整；右边是检索区，可以设置/预览中间的内容，跟Xcode的检索区差不多；下面是Python控制台，可以输入命令操作反编译。</p>\n<p>就先不多讲Hopper的使用了，有机会放在别的文章阐述。接下来，进入主题，开始破解！</p>\n<h2 id=\"查找可能的函数\"><a href=\"#查找可能的函数\" class=\"headerlink\" title=\"查找可能的函数\"></a>查找可能的函数</h2><p>迅雷想要验证是否是会员，肯定得有函数。按照程序猿千古流传的命名习惯，不用想就猜得到函数名：<code>isVip</code></p>\n<p>打开Hopper左边的搜索栏，上面的选择器选<code>Proc.</code>，就是搜索函数。然后搜索<code>isVip</code>，搜索出来，完全包含这个名字的函数有三个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/search-isvip.png\" alt=\"搜索 isvip\"></p>\n<p>我们先点开第一个（汇编指令区就会出现），然后在蓝色的那一栏单击，标“星”，方便以后查找。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/choose-and-add-star.png\" alt=\"标星\"></p>\n<p>接着，点开剩下两个，进行同样的标“星”操作。注意看图中的标“星”位置。<br>现在，清空搜索框，然后在选择其中选择“星”：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-star-func.png\" alt=\"选择标星的一栏\"></p>\n<p>好了！查找完了！</p>\n<h2 id=\"汇编思路\"><a href=\"#汇编思路\" class=\"headerlink\" title=\"汇编思路\"></a>汇编思路</h2><p>首先点开第一个（一长串的），然后参照<code>按键作用解释</code>那幅图，打开伪代码。类似OC伪代码应该如下：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;* @class ___4X2XLXH3O3STBRATSECONDT7R3OL4L34E1R___ *&#x2F;\n-(char)isVip &#123;\n    rbx &#x3D; [[UserController defaultUserController] retain];\n    r14 &#x3D; [rbx isVip];\n    [rbx release];\n    rax &#x3D; sign_extend_64(r14);\n    return rax;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>虽然我不太懂OC，但是大致可以看出是一个函数，最后返回了<code>rax</code>。那<code>rax</code>是什么？</p>\n<blockquote>\n<p>AX(AH、AL)：累加器。有些指令约定以AX(或AL)为源或目的寄存器。输入/输出指令必须通过AX或AL实现，例如：端口地址为43H的内容读入CPU的指令为INAL，43H或INAX，43H。目的操作数只能是AL/AX，而不能是其他的寄存器；<br>BX(BH、BL)：基址寄存器。BX可用作间接寻址的地址寄存器和基地址寄存器，BH、BL可用作8位通用数据寄存器；<br>CX(CH、CL)：计数寄存器。CX在循环和串操作中充当计数器，指令执行后CX内容自动修改，因此称为计数寄存器；<br>DX(DH、DL)：数据寄存器。除用作通用寄存器外，在1/O指令中可用作端口地址寄存器，乘除指令中用作辅助累加器；<br>EAX、ECX、EDX、EBX：ax、bx、cx、dx的延伸，各为32位元。  </p>\n</blockquote>\n<p>那么，这个函数最终会被<code>return rax</code>，而rax是真是假取决于账号，怎么办呢？思路：我们只需强制把<code>rax</code>换成真（代表着用户是会员），然后终止下面的进程就可以了！</p>\n<h2 id=\"修改程序\"><a href=\"#修改程序\" class=\"headerlink\" title=\"修改程序\"></a>修改程序</h2><ol>\n<li> 把光标放在第一行（<code>push</code>的位置），按下<kbd>option</kbd>+<kbd>a</kbd>（或者到顶部Modify &gt; Assemble Instruction），输入如下代码：<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">mov rax, 0x1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>为什么这样改：mov是数据转移指令，这个操作会把0x1这个数据转移给rax，这样rax就被我们强制设为真了。  </p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-change-1.png\" alt=\"修改1\"></p>\n<ol>\n<li> 回车，输入<code>ret</code>。<br>为什么这样改：<code>ret</code>是<code>return</code>的缩写，意为“结束子程序并返回到主程序“，因此，这下面其他的乱七八糟的没用指令都不会运行了。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-change-2.png\" alt=\"修改2\"></p>\n<ol start=\"2\">\n<li> 点击屏幕任意地方，关掉修改弹窗。下图为修改后：</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-changed.png\" alt=\"修改后\"></p>\n<p>这样，这个函数就被我们修改完了！用同样的方法，把剩下两个函数也修改成这样（patch）即可。</p>\n<h2 id=\"有自校验，但是一碰就碎\"><a href=\"#有自校验，但是一碰就碎\" class=\"headerlink\" title=\"有自校验，但是一碰就碎\"></a>有自校验，但是一碰就碎</h2><p>自校验，顾名思义就是自己看自己，有没有什么毛病。程序当然也会这样啊，如果看到自己的五脏六腑都移位了，就不会给你运行。当然，还有许多程序保护机制，比如防<code>hook</code>、反调试。</p>\n<p>接下来我们就要关闭这个系统。首先，做过苹果开发的都知道，在程序启动将要完成时，<code>AppDelegate</code>中的<code>applicationWillFinishLaunching</code>函数会运行。也就是说，迅雷想要启动时自检，必须通过这个函数。我们只要把这个函数里的脚本禁了就行了。</p>\n<p>老样子，搜索<code>appdelegate applicationWillFinishLaunching</code>（无需区分大小写）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-search-anticrack.jpg\" alt=\"搜索校验\"></p>\n<p>单击打开，然后选择函数的第一行，<kbd>option</kbd>+<kbd>a</kbd>修改，直接输入<code>ret</code>禁用：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-change-anticrack.png\" alt=\"修改自校验\"></p>\n<p>修改后：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-changed-anticrack.png\" alt=\"去除自校验代码\"></p>\n<p>——一碰就碎！</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><ol>\n<li><p> 按下<kbd>control</kbd>+<kbd>shift</kbd>+<kbd>E</kbd>。</p>\n</li>\n<li><p> 在新弹出的窗口中，选择<code>Remove Signature</code>移除签名。</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-rm-sign.png\" alt=\"移除签名\"></p>\n<ol start=\"3\">\n<li> 在接下来的提示小窗中，选择保存位置，名字还是<code>Thunder</code>，如果Hopper给你加了类似<code>.exe</code>的后缀，那么一定要<strong>去掉后缀名</strong>。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-save-exec.png\" alt=\"保存\"></p>\n<ol start=\"4\">\n<li> 用新的可执行文件替换掉旧的<code>Thunder</code>。</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-exec-replace.png\" alt=\"替换\"></p>\n<p>经过了这么多的操作，替换成功！</p>\n<h1 id=\"破解完工\"><a href=\"#破解完工\" class=\"headerlink\" title=\"破解完工\"></a>破解完工</h1><p><strong>以非VIP的身份登陆迅雷</strong>，验证成果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-xl-crack-done-1.png\" alt=\"破解成功1\"><br><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed/2020/1/29/hop-xl-crack-done-2.png\" alt=\"破解成功2\"></p>\n<p><strong>欢呼吧！</strong></p>\n<blockquote>\n<p><strong>此篇文章仅供研究学习，旨教给读者修改程序的方法，切勿商用或者广泛传播，否则后果自负！</strong></p>\n</blockquote>\n","text":" 破解目标：迅雷v3.0.9，登陆即是会员！ 缘起这也不是第一次想着进行破解二进制了。以前用过IDA、OD、010等软件，才知道，破解既困难，又有趣。 为什么我要用Hopper Disassembler进行破解？因为Hopper是一款针对Mac&amp;Unix类系统的破解软件；...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%98%E8%B5%B7\"><span class=\"toc-text\">缘起</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E5%87%86%E5%A4%87\"><span class=\"toc-text\">工具准备</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E7%A0%B4%E8%A7%A3\"><span class=\"toc-text\">开始破解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E5%88%86%E6%9E%90\"><span class=\"toc-text\">导入分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">查找可能的函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">汇编思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">修改程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E8%87%AA%E6%A0%A1%E9%AA%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%80%E7%A2%B0%E5%B0%B1%E7%A2%8E\"><span class=\"toc-text\">有自校验，但是一碰就碎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">导出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E5%AE%8C%E5%B7%A5\"><span class=\"toc-text\">破解完工</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"网站说明书","uid":"2531186e709026f117ed2f8ed7579f1d","slug":"网站说明书","date":"2020-01-28T09:40:35.000Z","updated":"2022-03-20T08:02:46.400Z","comments":true,"path":"api/articles/网站说明书.json","keywords":null,"cover":null,"text":"介绍这是我的个人博客网站，与2020年1月28日建成并发布。其中，我导入了一些我以前写的的优秀随笔，撰写了与现在编程与反编译相关的技术文章。在这个网站中，我会给大家呈现出我的最好内容，也会分享一些好文章。博客网站是一个很有趣的东西，有了它，就有了生活感；有了它，就有了时间感；有了...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":33,"path":"api/categories/随笔.json"}],"tags":[{"name":"说明","slug":"说明","count":1,"path":"api/tags/说明.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{}}