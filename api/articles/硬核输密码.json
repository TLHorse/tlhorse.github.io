{"title":"硬核输密码","uid":"d078a1992786209f6ee895552b5e3346","slug":"硬核输密码","date":"2020-06-29T03:51:11.000Z","updated":"2021-01-28T02:38:15.339Z","comments":true,"path":"api/articles/硬核输密码.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>好久没写文章了，今天输出一篇。首先，为了防止误判我是标题党，先解释一下在这篇文章里我要做什么。</p>\n<p>以前我在<a href=\"https://www.52pojie.cn/thread-1132170-1-1.html\">《【Mac】一次意外的 CleanMyMac X 破解》</a>里破解过CleanMyMac X（注：这篇帖子已被移动），但是最近CleanMyMac X更新，所以我便把旧版本的CMM删除了，下载了新版本4.6.7的CMM。结果不破不知道，一破吓一跳，动态库注入破解，破解倒是成功了，但是可能因为签名等问题，CMM总会在清理时不断地让我输入root密码，获取我的权限，尽管我已经赋予了CMM完全磁盘访问权限。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/6/29/pwd-enter-box.jpg\" alt=\"不断要求输入密码\"></p>\n<p>尝试过的解决方法：</p>\n<ul>\n<li><del><code>codesign -f -s - --deep /Applications/CleanMyMac\\ X.app</code></del></li>\n<li><del><code>AppleScript</code></del></li>\n<li><del>每一次都手动输一遍密码</del></li>\n<li><del>更换破解框架</del></li>\n</ul>\n<p>都不行。所以我准备写一段<code>Python</code>脚本，模拟键盘和鼠标，每当输入密码框弹出来时，自动输入密码并确认，你可以理解为一个轻量级的按键精灵。</p>\n<h1 id=\"0x1-编写代码\"><a href=\"#0x1-编写代码\" class=\"headerlink\" title=\"0x1 编写代码\"></a>0x1 编写代码</h1><p>首先使用<code>pip install pyuserinput</code>安装<code>PyUserInput</code>，然后导入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pymouse import PyMouse\nfrom pykeyboard import PyKeyboard\n\n# 定义键盘和鼠标实例\nm &#x3D; PyMouse()\nk &#x3D; PyKeyboard()\n\ndef enter_pass(pwd: str, pos&#x3D;(1322, 705), enter_bt_pos&#x3D;(1425, 759)):\n    &#39;&#39;&#39;\n    将输入密码流程封装成函数\n    &#39;&#39;&#39;\n    global m, k\n    m.click(pos[0], pos[1])\n    k.type_string(pwd)\n    m.click(enter_bt_pos[0], enter_bt_pos[1])\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    enter_pass(pwd&#x3D;&quot;password123&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中输入框位置(1322, 705)和确认键位置(1425, 759)是我通过macOS自带的截图工具<kbd>Command+Shift+5</kbd>获取的。</p>\n<p>之后我们打开CMM，选择操作&gt;身份验证，然后会弹出一个“安装帮助程序”的弹窗，运行脚本——你会发现，确认键成功被点击，但是脚本却没有成功输入密码。</p>\n<h1 id=\"0x2-绕过漏洞\"><a href=\"#0x2-绕过漏洞\" class=\"headerlink\" title=\"0x2 绕过漏洞\"></a>0x2 绕过漏洞</h1><p>研究了一番后，发现输入密码弹框属于系统层程序，因此无法模拟键盘输入（顺便提一下，<code>PyUserInput</code>是通过<code>pyobjc</code>调用<code>Objective-C</code>代码模拟的）。又试了试，发现密码弹窗有一个漏洞，那就是可以进行粘贴操作（不能复制）。怎么办呢？我们的新思路就是使用<code>pyperclip</code>框架先复制密码，然后点击文本框，再模拟键盘进行<kbd>Command+V</kbd>粘贴操作。</p>\n<p>代码改写如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pymouse import PyMouse \nfrom pykeyboard import PyKeyboard \nimport pyperclip as clip \n \nm &#x3D; PyMouse() \nk &#x3D; PyKeyboard() \n \ndef enter_pass(pwd: str, pos&#x3D;(1322, 705), enter_bt_pos&#x3D;(1425, 759)): \n    global m, k \n    clip.copy(pwd) \n    m.click(pos[0], pos[1]) \n    k.press_keys([&#39;Command&#39;, &#39;V&#39;])  # 快捷键组合函数\n    m.click(enter_bt_pos[0], enter_bt_pos[1]) \n \nif __name__ &#x3D;&#x3D; &#39;__main__&#39;: \n    enter_pass(pwd&#x3D;&quot;password123&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"0x3-优化速度\"><a href=\"#0x3-优化速度\" class=\"headerlink\" title=\"0x3 优化速度\"></a>0x3 优化速度</h1><p>上面的脚本运行后发现一切很好，但是太慢，原因是<code>pyperclip.copy()</code>占用的时间太长。怎么办呢？我便把<code>clip.copy(pwd)</code>改成了：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if not clip.paste() &#x3D;&#x3D; pwd:\n    clip.copy(pwd)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>检测剪贴板和密码是否相同，如果相同，就不复制了。效果还不错呢：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/2020/6/29/pwd-enter-vid.gif\" alt=\"效果\"></p>\n<h1 id=\"0x4-检测弹窗\"><a href=\"#0x4-检测弹窗\" class=\"headerlink\" title=\"0x4 检测弹窗\"></a>0x4 检测弹窗</h1><blockquote>\n<p><strong>你坑谁呢？难道每一次弹出密码窗口时我都要运行一遍脚本？</strong></p>\n</blockquote>\n<p>对于以上问题，我准备使用<code>PIL.ImageGrab</code>来不断捕捉屏幕，如果识别到弹窗，再运行<code>enter_pass:pos:enter_bt_pos:</code>函数。代码如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from PIL import ImageGrab\nfrom pymouse import PyMouse \nfrom pykeyboard import PyKeyboard \nimport pyperclip as clip \n \nm &#x3D; PyMouse() \nk &#x3D; PyKeyboard() \n \ndef enter_pass(pwd: str, pos&#x3D;(1322, 705), enter_bt_pos&#x3D;(1425, 759)): \n    global m, k \n    if not clip.paste() &#x3D;&#x3D; pwd: \n        clip.copy(pwd) \n    m.click(pos[0], pos[1]) \n    k.press_keys([&#39;Command&#39;, &#39;V&#39;]) \n    m.click(enter_bt_pos[0], enter_bt_pos[1]) \n \nif __name__ &#x3D;&#x3D; &#39;__main__&#39;: \n    print(&quot;Start grabbing:&quot;) \n    while True: \n        screen &#x3D; ImageGrab.grab().convert(&#39;RGB&#39;) # 捕捉屏幕\n        print(f&quot;Screen grabbed.&quot;) \n        colorls &#x3D; screen.load() # 加载数据\n        # 判断像素\n        if colorls[2222, 1478] &#x3D;&#x3D; (236, 236, 236) and colorls[2153, 1206] &#x3D;&#x3D; (236, 236, 236):\n            # 输入密码\n            enter_pass(pwd&#x3D;&quot;password123&quot;)\n            print(&quot;Password entered.&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>到此，我们的自动填充密码脚本便编写完了。</p>\n<h1 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h1><p>代码如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from PIL import ImageGrab\nfrom pymouse import PyMouse\nfrom pykeyboard import PyKeyboard\nimport pyperclip as clip\n\nm &#x3D; PyMouse()\nk &#x3D; PyKeyboard()\n\ndef enter_pass(pwd: str, pos&#x3D;(1322, 705), enter_bt_pos&#x3D;(1425, 759)):\n    global m, k\n    if not clip.paste() &#x3D;&#x3D; pwd:\n        clip.copy(pwd)\n    m.click(pos[0], pos[1])\n    k.press_keys([&#39;Command&#39;, &#39;V&#39;])\n    m.click(enter_bt_pos[0], enter_bt_pos[1])\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    no_passbox_count &#x3D; 0\n    idx &#x3D; 1\n    print(&quot;Start grabbing ------&quot;)\n    while True:\n        if no_passbox_count &gt; 4: break\n        screen &#x3D; ImageGrab.grab().convert(&#39;RGB&#39;)\n        colorls &#x3D; screen.load()\n        if colorls[2222, 1478] &#x3D;&#x3D; (236, 236, 236) and colorls[2153, 1206] &#x3D;&#x3D; (236, 236, 236)\n            enter_pass(pwd&#x3D;&quot;password123&quot;)\n            print(&quot;Password entered.&quot;)\n            no_passbox_count &#x3D; 0\n        else:\n            no_passbox_count +&#x3D; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行此<code>Python</code>脚本，之后启动 CleanMyMac X 清理，你就能看到脚本自动为你输密码的壮观景象了。由于截图时延迟比较大，在1秒左右，因此清理运行下来大概需要五分钟……</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>还是<del>去下载别人家的破解</del>买正版软件更好 : )</p>\n<blockquote>\n<p>如果贴友们有更好的方法解决 CleanMyMac 频繁让输入密码的问题（例：<code>codesign</code>），请跟帖留言。</p>\n</blockquote>\n","text":"前言好久没写文章了，今天输出一篇。首先，为了防止误判我是标题党，先解释一下在这篇文章里我要做什么。 以前我在《【Mac】一次意外的 CleanMyMac X 破解》里破解过CleanMyMac X（注：这篇帖子已被移动），但是最近CleanMyMac X更新，所以我便把旧版本的C...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"反编译","slug":"反编译","count":16,"path":"api/tags/反编译.json"},{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x1-%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">0x1 编写代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x2-%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">0x2 绕过漏洞</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x3-%E4%BC%98%E5%8C%96%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">0x3 优化速度</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x4-%E6%A3%80%E6%B5%8B%E5%BC%B9%E7%AA%97\"><span class=\"toc-text\">0x4 检测弹窗</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">最终效果</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol>","author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用零宽字符对文本加密的实现","uid":"f8fd7dab5a7c55790887e53b7dabdd36","slug":"使用零宽字符对文本加密的实现","date":"2021-02-02T01:41:42.000Z","updated":"2021-02-04T13:32:46.262Z","comments":true,"path":"api/articles/使用零宽字符对文本加密的实现.json","keywords":null,"cover":[],"text":" 本文为 www.52pojie.cn 首发 《使用零宽字符对文本加密的实现》 @TLHorse 前言说来话长。其实就是前几天我看到了一篇介绍Unicode的文章，里面介绍Unicode字符的广泛性。其中有一类字符叫做零宽字符，它们在电脑上输入，不可见，也不可打印，甚至输入都不会...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"Python","slug":"Python","count":5,"path":"api/tags/Python.json"},{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}},"next_post":{"title":"制作一个 Deepin Linux 启动盘","uid":"b236fef24e94acfbb460b9eae3617ab1","slug":"制作一个 Deepin Linux 启动盘","date":"2020-05-20T02:47:27.000Z","updated":"2021-12-12T02:58:02.272Z","comments":true,"path":"api/articles/制作一个 Deepin Linux 启动盘.json","keywords":null,"cover":[],"text":"前言Linux 乃是操作系统之王，其可玩性、扩展性、操作性和美化性远远超过了 Windows、OS X（Darwin）等传统操作系统。Deepin Linux 是 Linux 发行版中较好的一个。我们来比较一下 Linux 的安装方式： 安装到双系统：将 Linux 与 Wind...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"计算机","slug":"计算机","count":24,"path":"api/categories/计算机.json"}],"tags":[{"name":"系统底层","slug":"系统底层","count":1,"path":"api/tags/系统底层.json"}],"author":{"name":"TLHorse","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/TLHorse/TLBlogBed@master/blog_img/avatar.jpg","link":"/","description":"","socials":{"github":"https://github.com/TLHorse","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45415111","juejin":"","customs":{}}}}}